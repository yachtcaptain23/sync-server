// Code generated by protoc-gen-go. DO NOT EDIT.
// source: password_specifics.proto

package sync_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// All the strings are encoded with UTF-8. URLs are encoded in Punycode.
type PasswordSpecificsData struct {
	// SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
	// android credential or a password saved through Credential Manager API
	// (https://w3c.github.io/webappsec/specs/credentialmanagement/).
	// SCHEME_BASIC(1), basic access http authentication.
	// SCHEME_DIGEST(2), digest access authentication.
	// SCHEME_OTHER(3), another access authentication.
	Scheme *int32 `protobuf:"varint,1,opt,name=scheme" json:"scheme,omitempty"`
	// For parsed web forms and normal passwords saved through Credential Manager
	// API: url-scheme://url-host[:url-port]/
	// For Android apps (local + federated):
	//     "android://<hash of cert>@<package name>/"
	// where the hash is base64 encoded SHA512 of the app's public certificate.
	// For federated credentials:
	//     "federation://" + origin_host + "/" + federation_host
	// For proxy auth: proxy-host/auth-realm
	// For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
	SignonRealm *string `protobuf:"bytes,2,opt,name=signon_realm,json=signonRealm" json:"signon_realm,omitempty"`
	// For parsed web forms and Credential Manager API:
	//     url-scheme://url-host[:url-port]/path
	// For Android: "android://<hash of cert>@<package name>/"
	// For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
	Origin *string `protobuf:"bytes,3,opt,name=origin" json:"origin,omitempty"`
	// Only for web-parsed forms - the action target of the form:
	//     url-scheme://url-host[:url-port]/path
	Action *string `protobuf:"bytes,4,opt,name=action" json:"action,omitempty"`
	// Only for web-parsed forms - the name of the element containing username.
	UsernameElement *string `protobuf:"bytes,5,opt,name=username_element,json=usernameElement" json:"username_element,omitempty"`
	// For all: the username.
	// For blacklisted forms: <empty>.
	UsernameValue *string `protobuf:"bytes,6,opt,name=username_value,json=usernameValue" json:"username_value,omitempty"`
	// Only for web-parsed forms - the name of the element containing password.
	PasswordElement *string `protobuf:"bytes,7,opt,name=password_element,json=passwordElement" json:"password_element,omitempty"`
	// For all: the password.
	// For federated logins and blacklisted forms: <empty>
	PasswordValue *string `protobuf:"bytes,8,opt,name=password_value,json=passwordValue" json:"password_value,omitempty"`
	// Deprecated: http://crbug.com/413020
	// True if the credential was saved for a HTTPS session with a valid SSL cert.
	// Ignored for Android apps.
	SslValid *bool `protobuf:"varint,9,opt,name=ssl_valid,json=sslValid" json:"ssl_valid,omitempty"`
	// True for the last credential used for logging in on a given site.
	Preferred *bool `protobuf:"varint,10,opt,name=preferred" json:"preferred,omitempty"`
	// Time when the credential was created. Amount of microseconds since 1601.
	DateCreated *int64 `protobuf:"varint,11,opt,name=date_created,json=dateCreated" json:"date_created,omitempty"`
	// True, if user chose permanently not to save the credentials for the form.
	Blacklisted *bool `protobuf:"varint,12,opt,name=blacklisted" json:"blacklisted,omitempty"`
	// TYPE_MANUAL(0), user manually filled the username and the password.
	// TYPE_GENERATED(1), the credential was auto generated.
	Type *int32 `protobuf:"varint,13,opt,name=type" json:"type,omitempty"`
	// Number of times this login was used for logging in. Chrome uses this field
	// to distinguish log-in and sign-up forms.
	TimesUsed *int32 `protobuf:"varint,14,opt,name=times_used,json=timesUsed" json:"times_used,omitempty"`
	// A human readable name of the account holder. Set by CredentialManager API
	// and Android.
	DisplayName *string `protobuf:"bytes,15,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// A URL of the avatar for the credential. Set by CredentialManager API and
	// Android.
	AvatarUrl *string `protobuf:"bytes,16,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// A URL of the IdP used to verify the credential. Set by Credential Manager
	// API and Android.
	FederationUrl *string `protobuf:"bytes,17,opt,name=federation_url,json=federationUrl" json:"federation_url,omitempty"`
	// Time when the credential was last used. Amount of microseconds since 1601.
	DateLastUsed         *int64   `protobuf:"varint,18,opt,name=date_last_used,json=dateLastUsed" json:"date_last_used,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordSpecificsData) Reset()         { *m = PasswordSpecificsData{} }
func (m *PasswordSpecificsData) String() string { return proto.CompactTextString(m) }
func (*PasswordSpecificsData) ProtoMessage()    {}
func (*PasswordSpecificsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_edfbc09e797ff9f4, []int{0}
}

func (m *PasswordSpecificsData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordSpecificsData.Unmarshal(m, b)
}
func (m *PasswordSpecificsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordSpecificsData.Marshal(b, m, deterministic)
}
func (m *PasswordSpecificsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordSpecificsData.Merge(m, src)
}
func (m *PasswordSpecificsData) XXX_Size() int {
	return xxx_messageInfo_PasswordSpecificsData.Size(m)
}
func (m *PasswordSpecificsData) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordSpecificsData.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordSpecificsData proto.InternalMessageInfo

func (m *PasswordSpecificsData) GetScheme() int32 {
	if m != nil && m.Scheme != nil {
		return *m.Scheme
	}
	return 0
}

func (m *PasswordSpecificsData) GetSignonRealm() string {
	if m != nil && m.SignonRealm != nil {
		return *m.SignonRealm
	}
	return ""
}

func (m *PasswordSpecificsData) GetOrigin() string {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return ""
}

func (m *PasswordSpecificsData) GetAction() string {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return ""
}

func (m *PasswordSpecificsData) GetUsernameElement() string {
	if m != nil && m.UsernameElement != nil {
		return *m.UsernameElement
	}
	return ""
}

func (m *PasswordSpecificsData) GetUsernameValue() string {
	if m != nil && m.UsernameValue != nil {
		return *m.UsernameValue
	}
	return ""
}

func (m *PasswordSpecificsData) GetPasswordElement() string {
	if m != nil && m.PasswordElement != nil {
		return *m.PasswordElement
	}
	return ""
}

func (m *PasswordSpecificsData) GetPasswordValue() string {
	if m != nil && m.PasswordValue != nil {
		return *m.PasswordValue
	}
	return ""
}

func (m *PasswordSpecificsData) GetSslValid() bool {
	if m != nil && m.SslValid != nil {
		return *m.SslValid
	}
	return false
}

func (m *PasswordSpecificsData) GetPreferred() bool {
	if m != nil && m.Preferred != nil {
		return *m.Preferred
	}
	return false
}

func (m *PasswordSpecificsData) GetDateCreated() int64 {
	if m != nil && m.DateCreated != nil {
		return *m.DateCreated
	}
	return 0
}

func (m *PasswordSpecificsData) GetBlacklisted() bool {
	if m != nil && m.Blacklisted != nil {
		return *m.Blacklisted
	}
	return false
}

func (m *PasswordSpecificsData) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PasswordSpecificsData) GetTimesUsed() int32 {
	if m != nil && m.TimesUsed != nil {
		return *m.TimesUsed
	}
	return 0
}

func (m *PasswordSpecificsData) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *PasswordSpecificsData) GetAvatarUrl() string {
	if m != nil && m.AvatarUrl != nil {
		return *m.AvatarUrl
	}
	return ""
}

func (m *PasswordSpecificsData) GetFederationUrl() string {
	if m != nil && m.FederationUrl != nil {
		return *m.FederationUrl
	}
	return ""
}

func (m *PasswordSpecificsData) GetDateLastUsed() int64 {
	if m != nil && m.DateLastUsed != nil {
		return *m.DateLastUsed
	}
	return 0
}

// Contains the password specifics metadata which simplifies its lookup.
type PasswordSpecificsMetadata struct {
	Url                  *string  `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordSpecificsMetadata) Reset()         { *m = PasswordSpecificsMetadata{} }
func (m *PasswordSpecificsMetadata) String() string { return proto.CompactTextString(m) }
func (*PasswordSpecificsMetadata) ProtoMessage()    {}
func (*PasswordSpecificsMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_edfbc09e797ff9f4, []int{1}
}

func (m *PasswordSpecificsMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordSpecificsMetadata.Unmarshal(m, b)
}
func (m *PasswordSpecificsMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordSpecificsMetadata.Marshal(b, m, deterministic)
}
func (m *PasswordSpecificsMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordSpecificsMetadata.Merge(m, src)
}
func (m *PasswordSpecificsMetadata) XXX_Size() int {
	return xxx_messageInfo_PasswordSpecificsMetadata.Size(m)
}
func (m *PasswordSpecificsMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordSpecificsMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordSpecificsMetadata proto.InternalMessageInfo

func (m *PasswordSpecificsMetadata) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

// Properties of password sync objects.
type PasswordSpecifics struct {
	// The actual password data. Contains an encrypted PasswordSpecificsData
	// message.
	Encrypted *EncryptedData `protobuf:"bytes,1,opt,name=encrypted" json:"encrypted,omitempty"`
	// An unsynced field for use internally on the client. This field should
	// never be set in any network-based communications because it contains
	// unencrypted material.
	ClientOnlyEncryptedData *PasswordSpecificsData `protobuf:"bytes,2,opt,name=client_only_encrypted_data,json=clientOnlyEncryptedData" json:"client_only_encrypted_data,omitempty"`
	// Password related metadata, which is sent to the server side. The field
	// should never be set for full encryption users. If encryption is enabled,
	// this field must be cleared.
	UnencryptedMetadata  *PasswordSpecificsMetadata `protobuf:"bytes,3,opt,name=unencrypted_metadata,json=unencryptedMetadata" json:"unencrypted_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PasswordSpecifics) Reset()         { *m = PasswordSpecifics{} }
func (m *PasswordSpecifics) String() string { return proto.CompactTextString(m) }
func (*PasswordSpecifics) ProtoMessage()    {}
func (*PasswordSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_edfbc09e797ff9f4, []int{2}
}

func (m *PasswordSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordSpecifics.Unmarshal(m, b)
}
func (m *PasswordSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordSpecifics.Marshal(b, m, deterministic)
}
func (m *PasswordSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordSpecifics.Merge(m, src)
}
func (m *PasswordSpecifics) XXX_Size() int {
	return xxx_messageInfo_PasswordSpecifics.Size(m)
}
func (m *PasswordSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordSpecifics proto.InternalMessageInfo

func (m *PasswordSpecifics) GetEncrypted() *EncryptedData {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *PasswordSpecifics) GetClientOnlyEncryptedData() *PasswordSpecificsData {
	if m != nil {
		return m.ClientOnlyEncryptedData
	}
	return nil
}

func (m *PasswordSpecifics) GetUnencryptedMetadata() *PasswordSpecificsMetadata {
	if m != nil {
		return m.UnencryptedMetadata
	}
	return nil
}

func init() {
	proto.RegisterType((*PasswordSpecificsData)(nil), "sync_pb.PasswordSpecificsData")
	proto.RegisterType((*PasswordSpecificsMetadata)(nil), "sync_pb.PasswordSpecificsMetadata")
	proto.RegisterType((*PasswordSpecifics)(nil), "sync_pb.PasswordSpecifics")
}

func init() {
	proto.RegisterFile("password_specifics.proto", fileDescriptor_edfbc09e797ff9f4)
}

var fileDescriptor_edfbc09e797ff9f4 = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x15, 0xda, 0x6d, 0x8d, 0xb3, 0x75, 0x9d, 0x81, 0x61, 0xc6, 0x87, 0x4a, 0xc5, 0xa4,
	0x22, 0x44, 0x2f, 0x2a, 0x9e, 0x00, 0x98, 0xc4, 0x05, 0x1f, 0x53, 0x50, 0x77, 0xc3, 0x85, 0xe5,
	0x39, 0xa7, 0x9d, 0x85, 0x63, 0x47, 0xb6, 0x33, 0x94, 0x37, 0xe6, 0x25, 0x90, 0x90, 0xed, 0x24,
	0x2d, 0x1a, 0xdc, 0xc5, 0xbf, 0xf3, 0x3f, 0xff, 0x93, 0x73, 0x7c, 0x8c, 0x48, 0xc5, 0xac, 0xfd,
	0xa9, 0x4d, 0x41, 0x6d, 0x05, 0x5c, 0xac, 0x05, 0xb7, 0x8b, 0xca, 0x68, 0xa7, 0xf1, 0x81, 0x6d,
	0x14, 0xa7, 0xd5, 0xf5, 0xd9, 0x04, 0x14, 0x37, 0x4d, 0xe5, 0x84, 0x56, 0x31, 0x34, 0xfb, 0x35,
	0x44, 0x0f, 0x2f, 0xdb, 0xbc, 0x6f, 0x5d, 0xda, 0x07, 0xe6, 0x18, 0x3e, 0x45, 0xfb, 0x96, 0xdf,
	0x40, 0x09, 0x24, 0x99, 0x26, 0xf3, 0xbd, 0xbc, 0x3d, 0xe1, 0x17, 0xe8, 0xd0, 0x8a, 0x8d, 0xd2,
	0x8a, 0x1a, 0x60, 0xb2, 0x24, 0xf7, 0xa6, 0xc9, 0x3c, 0xcd, 0xb3, 0xc8, 0x72, 0x8f, 0x7c, 0xaa,
	0x36, 0x62, 0x23, 0x14, 0x19, 0x84, 0x60, 0x7b, 0xf2, 0x9c, 0x71, 0x5f, 0x9c, 0x0c, 0x23, 0x8f,
	0x27, 0xfc, 0x0a, 0x4d, 0x6a, 0x0b, 0x46, 0xb1, 0x12, 0x28, 0x48, 0x28, 0x41, 0x39, 0xb2, 0x17,
	0x14, 0xc7, 0x1d, 0xbf, 0x88, 0x18, 0x9f, 0xa3, 0x71, 0x2f, 0xbd, 0x65, 0xb2, 0x06, 0xb2, 0x1f,
	0x84, 0x47, 0x1d, 0xbd, 0xf2, 0xd0, 0x3b, 0xf6, 0xd3, 0xe8, 0x1c, 0x0f, 0xa2, 0x63, 0xc7, 0x77,
	0x1c, 0x7b, 0x69, 0x74, 0x1c, 0x45, 0xc7, 0x8e, 0x46, 0xc7, 0x27, 0x28, 0xb5, 0x56, 0x7a, 0x85,
	0x28, 0x48, 0x3a, 0x4d, 0xe6, 0xa3, 0x7c, 0x64, 0xad, 0xbc, 0xf2, 0x67, 0xfc, 0x14, 0xa5, 0x95,
	0x81, 0x35, 0x18, 0x03, 0x05, 0x41, 0x21, 0xb8, 0x05, 0x7e, 0x62, 0x05, 0x73, 0x40, 0xb9, 0x01,
	0xe6, 0xa0, 0x20, 0xd9, 0x34, 0x99, 0x0f, 0xf2, 0xcc, 0xb3, 0xf7, 0x11, 0xe1, 0x29, 0xca, 0xae,
	0x25, 0xe3, 0x3f, 0xa4, 0xb0, 0x5e, 0x71, 0x18, 0x2c, 0x76, 0x11, 0xc6, 0x68, 0xe8, 0x9a, 0x0a,
	0xc8, 0x51, 0xb8, 0x8c, 0xf0, 0x8d, 0x9f, 0x21, 0xe4, 0x44, 0x09, 0x96, 0xd6, 0x16, 0x0a, 0x32,
	0x0e, 0x91, 0x34, 0x90, 0x95, 0x6d, 0xeb, 0x0a, 0x5b, 0x49, 0xd6, 0x50, 0x3f, 0x19, 0x72, 0x1c,
	0x6f, 0xaa, 0x65, 0x5f, 0x58, 0x19, 0x1c, 0xd8, 0x2d, 0x73, 0xcc, 0xd0, 0xda, 0x48, 0x32, 0x09,
	0x82, 0x34, 0x92, 0x95, 0x91, 0x7e, 0x36, 0x6b, 0x28, 0xc0, 0x30, 0x7f, 0x4d, 0x41, 0x72, 0x12,
	0x67, 0xb3, 0xa5, 0x5e, 0xf6, 0x12, 0x8d, 0x43, 0x83, 0x92, 0x59, 0x17, 0xff, 0x05, 0x87, 0x16,
	0x43, 0xdb, 0x9f, 0x98, 0x75, 0xfe, 0x77, 0x66, 0x6f, 0xd0, 0xe3, 0x3b, 0x9b, 0xf6, 0x19, 0x1c,
	0x2b, 0xfc, 0xb6, 0x4d, 0xd0, 0xc0, 0xdb, 0x27, 0xc1, 0xde, 0x7f, 0xce, 0x7e, 0x27, 0xe8, 0xe4,
	0x8e, 0x1e, 0xbf, 0x45, 0x69, 0xbb, 0xc3, 0x50, 0x04, 0x75, 0xb6, 0x3c, 0x5d, 0xb4, 0xeb, 0xbd,
	0xb8, 0xe8, 0x22, 0x7e, 0x81, 0xf3, 0xad, 0x10, 0x7f, 0x47, 0x67, 0x5c, 0x0a, 0x50, 0x8e, 0x6a,
	0x25, 0x1b, 0xda, 0x07, 0xa8, 0xaf, 0x1d, 0x36, 0x38, 0x5b, 0x3e, 0xef, 0x6d, 0xfe, 0xf9, 0x1e,
	0xf2, 0x47, 0xd1, 0xe1, 0xab, 0x92, 0xcd, 0x5f, 0x75, 0xf0, 0x0a, 0x3d, 0xa8, 0xd5, 0xd6, 0xb2,
	0x6c, 0x5b, 0x0a, 0xbb, 0x9f, 0x2d, 0x67, 0xff, 0xb7, 0xed, 0x9a, 0xcf, 0xef, 0xef, 0xe4, 0x77,
	0xf0, 0xdd, 0x6b, 0x74, 0xae, 0xcd, 0x66, 0xc1, 0x6f, 0x8c, 0x2e, 0x45, 0x5d, 0x2e, 0xb8, 0x2e,
	0x2b, 0xad, 0x40, 0x39, 0x1b, 0x1c, 0xe3, 0xfb, 0xe5, 0x5a, 0x7e, 0x1c, 0x5c, 0x26, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x59, 0x2a, 0x6f, 0xca, 0xfc, 0x03, 0x00, 0x00,
}
