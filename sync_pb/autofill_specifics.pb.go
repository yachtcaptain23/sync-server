// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autofill_specifics.proto

package sync_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WalletMaskedCreditCard_WalletCardStatus int32

const (
	WalletMaskedCreditCard_VALID   WalletMaskedCreditCard_WalletCardStatus = 0
	WalletMaskedCreditCard_EXPIRED WalletMaskedCreditCard_WalletCardStatus = 1
)

var WalletMaskedCreditCard_WalletCardStatus_name = map[int32]string{
	0: "VALID",
	1: "EXPIRED",
}

var WalletMaskedCreditCard_WalletCardStatus_value = map[string]int32{
	"VALID":   0,
	"EXPIRED": 1,
}

func (x WalletMaskedCreditCard_WalletCardStatus) Enum() *WalletMaskedCreditCard_WalletCardStatus {
	p := new(WalletMaskedCreditCard_WalletCardStatus)
	*p = x
	return p
}

func (x WalletMaskedCreditCard_WalletCardStatus) String() string {
	return proto.EnumName(WalletMaskedCreditCard_WalletCardStatus_name, int32(x))
}

func (x *WalletMaskedCreditCard_WalletCardStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WalletMaskedCreditCard_WalletCardStatus_value, data, "WalletMaskedCreditCard_WalletCardStatus")
	if err != nil {
		return err
	}
	*x = WalletMaskedCreditCard_WalletCardStatus(value)
	return nil
}

func (WalletMaskedCreditCard_WalletCardStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{3, 0}
}

type WalletMaskedCreditCard_WalletCardType int32

const (
	WalletMaskedCreditCard_UNKNOWN     WalletMaskedCreditCard_WalletCardType = 0
	WalletMaskedCreditCard_AMEX        WalletMaskedCreditCard_WalletCardType = 1
	WalletMaskedCreditCard_DISCOVER    WalletMaskedCreditCard_WalletCardType = 2
	WalletMaskedCreditCard_JCB         WalletMaskedCreditCard_WalletCardType = 3
	WalletMaskedCreditCard_MAESTRO     WalletMaskedCreditCard_WalletCardType = 4
	WalletMaskedCreditCard_MASTER_CARD WalletMaskedCreditCard_WalletCardType = 5
	WalletMaskedCreditCard_SOLO        WalletMaskedCreditCard_WalletCardType = 6
	WalletMaskedCreditCard_SWITCH      WalletMaskedCreditCard_WalletCardType = 7
	WalletMaskedCreditCard_VISA        WalletMaskedCreditCard_WalletCardType = 8
	WalletMaskedCreditCard_UNIONPAY    WalletMaskedCreditCard_WalletCardType = 9
)

var WalletMaskedCreditCard_WalletCardType_name = map[int32]string{
	0: "UNKNOWN",
	1: "AMEX",
	2: "DISCOVER",
	3: "JCB",
	4: "MAESTRO",
	5: "MASTER_CARD",
	6: "SOLO",
	7: "SWITCH",
	8: "VISA",
	9: "UNIONPAY",
}

var WalletMaskedCreditCard_WalletCardType_value = map[string]int32{
	"UNKNOWN":     0,
	"AMEX":        1,
	"DISCOVER":    2,
	"JCB":         3,
	"MAESTRO":     4,
	"MASTER_CARD": 5,
	"SOLO":        6,
	"SWITCH":      7,
	"VISA":        8,
	"UNIONPAY":    9,
}

func (x WalletMaskedCreditCard_WalletCardType) Enum() *WalletMaskedCreditCard_WalletCardType {
	p := new(WalletMaskedCreditCard_WalletCardType)
	*p = x
	return p
}

func (x WalletMaskedCreditCard_WalletCardType) String() string {
	return proto.EnumName(WalletMaskedCreditCard_WalletCardType_name, int32(x))
}

func (x *WalletMaskedCreditCard_WalletCardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WalletMaskedCreditCard_WalletCardType_value, data, "WalletMaskedCreditCard_WalletCardType")
	if err != nil {
		return err
	}
	*x = WalletMaskedCreditCard_WalletCardType(value)
	return nil
}

func (WalletMaskedCreditCard_WalletCardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{3, 1}
}

type WalletMaskedCreditCard_WalletCardClass int32

const (
	WalletMaskedCreditCard_UNKNOWN_CARD_CLASS WalletMaskedCreditCard_WalletCardClass = 0
	WalletMaskedCreditCard_CREDIT             WalletMaskedCreditCard_WalletCardClass = 1
	WalletMaskedCreditCard_DEBIT              WalletMaskedCreditCard_WalletCardClass = 2
	WalletMaskedCreditCard_PREPAID            WalletMaskedCreditCard_WalletCardClass = 3
)

var WalletMaskedCreditCard_WalletCardClass_name = map[int32]string{
	0: "UNKNOWN_CARD_CLASS",
	1: "CREDIT",
	2: "DEBIT",
	3: "PREPAID",
}

var WalletMaskedCreditCard_WalletCardClass_value = map[string]int32{
	"UNKNOWN_CARD_CLASS": 0,
	"CREDIT":             1,
	"DEBIT":              2,
	"PREPAID":            3,
}

func (x WalletMaskedCreditCard_WalletCardClass) Enum() *WalletMaskedCreditCard_WalletCardClass {
	p := new(WalletMaskedCreditCard_WalletCardClass)
	*p = x
	return p
}

func (x WalletMaskedCreditCard_WalletCardClass) String() string {
	return proto.EnumName(WalletMaskedCreditCard_WalletCardClass_name, int32(x))
}

func (x *WalletMaskedCreditCard_WalletCardClass) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WalletMaskedCreditCard_WalletCardClass_value, data, "WalletMaskedCreditCard_WalletCardClass")
	if err != nil {
		return err
	}
	*x = WalletMaskedCreditCard_WalletCardClass(value)
	return nil
}

func (WalletMaskedCreditCard_WalletCardClass) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{3, 2}
}

type AutofillWalletSpecifics_WalletInfoType int32

const (
	AutofillWalletSpecifics_UNKNOWN                      AutofillWalletSpecifics_WalletInfoType = 0
	AutofillWalletSpecifics_MASKED_CREDIT_CARD           AutofillWalletSpecifics_WalletInfoType = 1
	AutofillWalletSpecifics_POSTAL_ADDRESS               AutofillWalletSpecifics_WalletInfoType = 2
	AutofillWalletSpecifics_CUSTOMER_DATA                AutofillWalletSpecifics_WalletInfoType = 3
	AutofillWalletSpecifics_CREDIT_CARD_CLOUD_TOKEN_DATA AutofillWalletSpecifics_WalletInfoType = 4
)

var AutofillWalletSpecifics_WalletInfoType_name = map[int32]string{
	0: "UNKNOWN",
	1: "MASKED_CREDIT_CARD",
	2: "POSTAL_ADDRESS",
	3: "CUSTOMER_DATA",
	4: "CREDIT_CARD_CLOUD_TOKEN_DATA",
}

var AutofillWalletSpecifics_WalletInfoType_value = map[string]int32{
	"UNKNOWN":                      0,
	"MASKED_CREDIT_CARD":           1,
	"POSTAL_ADDRESS":               2,
	"CUSTOMER_DATA":                3,
	"CREDIT_CARD_CLOUD_TOKEN_DATA": 4,
}

func (x AutofillWalletSpecifics_WalletInfoType) Enum() *AutofillWalletSpecifics_WalletInfoType {
	p := new(AutofillWalletSpecifics_WalletInfoType)
	*p = x
	return p
}

func (x AutofillWalletSpecifics_WalletInfoType) String() string {
	return proto.EnumName(AutofillWalletSpecifics_WalletInfoType_name, int32(x))
}

func (x *AutofillWalletSpecifics_WalletInfoType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AutofillWalletSpecifics_WalletInfoType_value, data, "AutofillWalletSpecifics_WalletInfoType")
	if err != nil {
		return err
	}
	*x = AutofillWalletSpecifics_WalletInfoType(value)
	return nil
}

func (AutofillWalletSpecifics_WalletInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{7, 0}
}

type WalletMetadataSpecifics_Type int32

const (
	WalletMetadataSpecifics_UNKNOWN WalletMetadataSpecifics_Type = 0
	WalletMetadataSpecifics_CARD    WalletMetadataSpecifics_Type = 1
	WalletMetadataSpecifics_ADDRESS WalletMetadataSpecifics_Type = 2
)

var WalletMetadataSpecifics_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "CARD",
	2: "ADDRESS",
}

var WalletMetadataSpecifics_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"CARD":    1,
	"ADDRESS": 2,
}

func (x WalletMetadataSpecifics_Type) Enum() *WalletMetadataSpecifics_Type {
	p := new(WalletMetadataSpecifics_Type)
	*p = x
	return p
}

func (x WalletMetadataSpecifics_Type) String() string {
	return proto.EnumName(WalletMetadataSpecifics_Type_name, int32(x))
}

func (x *WalletMetadataSpecifics_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WalletMetadataSpecifics_Type_value, data, "WalletMetadataSpecifics_Type")
	if err != nil {
		return err
	}
	*x = WalletMetadataSpecifics_Type(value)
	return nil
}

func (WalletMetadataSpecifics_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{8, 0}
}

// An AutofillProfile.
type AutofillProfileSpecifics struct {
	Guid     *string `protobuf:"bytes,15,opt,name=guid" json:"guid,omitempty"`
	Origin   *string `protobuf:"bytes,16,opt,name=origin" json:"origin,omitempty"`
	UseCount *int64  `protobuf:"varint,22,opt,name=use_count,json=useCount" json:"use_count,omitempty"`
	// The time_t value of the last time this profile was used. This
	// value makes sense wrt base::Time::To/FromTimeT, which measures
	// from the Windows epoch.
	UseDate *int64 `protobuf:"varint,23,opt,name=use_date,json=useDate" json:"use_date,omitempty"`
	// Contact info.
	NameFirst    []string `protobuf:"bytes,2,rep,name=name_first,json=nameFirst" json:"name_first,omitempty"`
	NameMiddle   []string `protobuf:"bytes,3,rep,name=name_middle,json=nameMiddle" json:"name_middle,omitempty"`
	NameLast     []string `protobuf:"bytes,4,rep,name=name_last,json=nameLast" json:"name_last,omitempty"`
	NameFull     []string `protobuf:"bytes,21,rep,name=name_full,json=nameFull" json:"name_full,omitempty"`
	EmailAddress []string `protobuf:"bytes,5,rep,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	CompanyName  *string  `protobuf:"bytes,6,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
	// Address.
	AddressHomeLine1   *string `protobuf:"bytes,7,opt,name=address_home_line1,json=addressHomeLine1" json:"address_home_line1,omitempty"`
	AddressHomeLine2   *string `protobuf:"bytes,8,opt,name=address_home_line2,json=addressHomeLine2" json:"address_home_line2,omitempty"`
	AddressHomeCity    *string `protobuf:"bytes,9,opt,name=address_home_city,json=addressHomeCity" json:"address_home_city,omitempty"`
	AddressHomeState   *string `protobuf:"bytes,10,opt,name=address_home_state,json=addressHomeState" json:"address_home_state,omitempty"`
	AddressHomeZip     *string `protobuf:"bytes,11,opt,name=address_home_zip,json=addressHomeZip" json:"address_home_zip,omitempty"`
	AddressHomeCountry *string `protobuf:"bytes,12,opt,name=address_home_country,json=addressHomeCountry" json:"address_home_country,omitempty"`
	// Additional address fields for i18n.
	AddressHomeStreetAddress     *string `protobuf:"bytes,17,opt,name=address_home_street_address,json=addressHomeStreetAddress" json:"address_home_street_address,omitempty"`
	AddressHomeSortingCode       *string `protobuf:"bytes,18,opt,name=address_home_sorting_code,json=addressHomeSortingCode" json:"address_home_sorting_code,omitempty"`
	AddressHomeDependentLocality *string `protobuf:"bytes,19,opt,name=address_home_dependent_locality,json=addressHomeDependentLocality" json:"address_home_dependent_locality,omitempty"`
	AddressHomeLanguageCode      *string `protobuf:"bytes,20,opt,name=address_home_language_code,json=addressHomeLanguageCode" json:"address_home_language_code,omitempty"`
	// Phone.
	PhoneHomeWholeNumber []string `protobuf:"bytes,13,rep,name=phone_home_whole_number,json=phoneHomeWholeNumber" json:"phone_home_whole_number,omitempty"`
	// Validity bitfield.
	// Each set of two bits represents the validity state of a specific part of
	// the Autofill address. For more info please refer to autofill_profile.h.
	ValidityStateBitfield *int64 `protobuf:"varint,24,opt,name=validity_state_bitfield,json=validityStateBitfield" json:"validity_state_bitfield,omitempty"`
	// Denotes whether the validity_state_bitfield is updated according to the
	// changes in the autofill profile values.
	IsClientValidityStatesUpdated *bool `protobuf:"varint,25,opt,name=is_client_validity_states_updated,json=isClientValidityStatesUpdated" json:"is_client_validity_states_updated,omitempty"`
	// Deprecated.
	Label                *string  `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`                                                             // Deprecated: Do not use.
	PhoneFaxWholeNumber  *string  `protobuf:"bytes,14,opt,name=phone_fax_whole_number,json=phoneFaxWholeNumber" json:"phone_fax_whole_number,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutofillProfileSpecifics) Reset()         { *m = AutofillProfileSpecifics{} }
func (m *AutofillProfileSpecifics) String() string { return proto.CompactTextString(m) }
func (*AutofillProfileSpecifics) ProtoMessage()    {}
func (*AutofillProfileSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{0}
}

func (m *AutofillProfileSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutofillProfileSpecifics.Unmarshal(m, b)
}
func (m *AutofillProfileSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutofillProfileSpecifics.Marshal(b, m, deterministic)
}
func (m *AutofillProfileSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutofillProfileSpecifics.Merge(m, src)
}
func (m *AutofillProfileSpecifics) XXX_Size() int {
	return xxx_messageInfo_AutofillProfileSpecifics.Size(m)
}
func (m *AutofillProfileSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_AutofillProfileSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_AutofillProfileSpecifics proto.InternalMessageInfo

func (m *AutofillProfileSpecifics) GetGuid() string {
	if m != nil && m.Guid != nil {
		return *m.Guid
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetOrigin() string {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetUseCount() int64 {
	if m != nil && m.UseCount != nil {
		return *m.UseCount
	}
	return 0
}

func (m *AutofillProfileSpecifics) GetUseDate() int64 {
	if m != nil && m.UseDate != nil {
		return *m.UseDate
	}
	return 0
}

func (m *AutofillProfileSpecifics) GetNameFirst() []string {
	if m != nil {
		return m.NameFirst
	}
	return nil
}

func (m *AutofillProfileSpecifics) GetNameMiddle() []string {
	if m != nil {
		return m.NameMiddle
	}
	return nil
}

func (m *AutofillProfileSpecifics) GetNameLast() []string {
	if m != nil {
		return m.NameLast
	}
	return nil
}

func (m *AutofillProfileSpecifics) GetNameFull() []string {
	if m != nil {
		return m.NameFull
	}
	return nil
}

func (m *AutofillProfileSpecifics) GetEmailAddress() []string {
	if m != nil {
		return m.EmailAddress
	}
	return nil
}

func (m *AutofillProfileSpecifics) GetCompanyName() string {
	if m != nil && m.CompanyName != nil {
		return *m.CompanyName
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetAddressHomeLine1() string {
	if m != nil && m.AddressHomeLine1 != nil {
		return *m.AddressHomeLine1
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetAddressHomeLine2() string {
	if m != nil && m.AddressHomeLine2 != nil {
		return *m.AddressHomeLine2
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetAddressHomeCity() string {
	if m != nil && m.AddressHomeCity != nil {
		return *m.AddressHomeCity
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetAddressHomeState() string {
	if m != nil && m.AddressHomeState != nil {
		return *m.AddressHomeState
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetAddressHomeZip() string {
	if m != nil && m.AddressHomeZip != nil {
		return *m.AddressHomeZip
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetAddressHomeCountry() string {
	if m != nil && m.AddressHomeCountry != nil {
		return *m.AddressHomeCountry
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetAddressHomeStreetAddress() string {
	if m != nil && m.AddressHomeStreetAddress != nil {
		return *m.AddressHomeStreetAddress
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetAddressHomeSortingCode() string {
	if m != nil && m.AddressHomeSortingCode != nil {
		return *m.AddressHomeSortingCode
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetAddressHomeDependentLocality() string {
	if m != nil && m.AddressHomeDependentLocality != nil {
		return *m.AddressHomeDependentLocality
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetAddressHomeLanguageCode() string {
	if m != nil && m.AddressHomeLanguageCode != nil {
		return *m.AddressHomeLanguageCode
	}
	return ""
}

func (m *AutofillProfileSpecifics) GetPhoneHomeWholeNumber() []string {
	if m != nil {
		return m.PhoneHomeWholeNumber
	}
	return nil
}

func (m *AutofillProfileSpecifics) GetValidityStateBitfield() int64 {
	if m != nil && m.ValidityStateBitfield != nil {
		return *m.ValidityStateBitfield
	}
	return 0
}

func (m *AutofillProfileSpecifics) GetIsClientValidityStatesUpdated() bool {
	if m != nil && m.IsClientValidityStatesUpdated != nil {
		return *m.IsClientValidityStatesUpdated
	}
	return false
}

// Deprecated: Do not use.
func (m *AutofillProfileSpecifics) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

// Deprecated: Do not use.
func (m *AutofillProfileSpecifics) GetPhoneFaxWholeNumber() string {
	if m != nil && m.PhoneFaxWholeNumber != nil {
		return *m.PhoneFaxWholeNumber
	}
	return ""
}

type AutofillSpecifics struct {
	// If any of these 3 fields are present, then all 3 should be, and it implies
	// that this entity represents a classic autofill object.  In this case,
	// none of the autofill++ objects below should be present.
	Name           *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value          *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	UsageTimestamp []int64 `protobuf:"varint,3,rep,name=usage_timestamp,json=usageTimestamp" json:"usage_timestamp,omitempty"`
	// An autofill++ profile object.  If present, indicates this entity
	// represents an AutofillProfile exclusively, and no other fields (such as
	// name/value or credit_card) should be present.
	Profile              *AutofillProfileSpecifics `protobuf:"bytes,4,opt,name=profile" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *AutofillSpecifics) Reset()         { *m = AutofillSpecifics{} }
func (m *AutofillSpecifics) String() string { return proto.CompactTextString(m) }
func (*AutofillSpecifics) ProtoMessage()    {}
func (*AutofillSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{1}
}

func (m *AutofillSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutofillSpecifics.Unmarshal(m, b)
}
func (m *AutofillSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutofillSpecifics.Marshal(b, m, deterministic)
}
func (m *AutofillSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutofillSpecifics.Merge(m, src)
}
func (m *AutofillSpecifics) XXX_Size() int {
	return xxx_messageInfo_AutofillSpecifics.Size(m)
}
func (m *AutofillSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_AutofillSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_AutofillSpecifics proto.InternalMessageInfo

func (m *AutofillSpecifics) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AutofillSpecifics) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *AutofillSpecifics) GetUsageTimestamp() []int64 {
	if m != nil {
		return m.UsageTimestamp
	}
	return nil
}

func (m *AutofillSpecifics) GetProfile() *AutofillProfileSpecifics {
	if m != nil {
		return m.Profile
	}
	return nil
}

// TODO(crbug.com/1020740): Deprecated, remove this once dependent change is
// done. Use WalletCreditCardCloudTokenData instead.
type CloudTokenData struct {
	// Last 4-5 digits of the Cloud Primary Account Number (CPAN).
	Suffix *string `protobuf:"bytes,1,opt,name=suffix" json:"suffix,omitempty"`
	// CPAN Month number 1-12.
	ExpMonth *int32 `protobuf:"varint,2,opt,name=exp_month,json=expMonth" json:"exp_month,omitempty"`
	// CPAN Four-digit year (e.g. 2017).
	ExpYear *int32 `protobuf:"varint,3,opt,name=exp_year,json=expYear" json:"exp_year,omitempty"`
	// URL of the card art to be displayed for CPAN.
	ArtFifeUrl *string `protobuf:"bytes,4,opt,name=art_fife_url,json=artFifeUrl" json:"art_fife_url,omitempty"`
	// Opaque identifier for the cloud token associated with the payment
	// instrument.
	InstrumentToken      *string  `protobuf:"bytes,5,opt,name=instrument_token,json=instrumentToken" json:"instrument_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudTokenData) Reset()         { *m = CloudTokenData{} }
func (m *CloudTokenData) String() string { return proto.CompactTextString(m) }
func (*CloudTokenData) ProtoMessage()    {}
func (*CloudTokenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{2}
}

func (m *CloudTokenData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudTokenData.Unmarshal(m, b)
}
func (m *CloudTokenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudTokenData.Marshal(b, m, deterministic)
}
func (m *CloudTokenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudTokenData.Merge(m, src)
}
func (m *CloudTokenData) XXX_Size() int {
	return xxx_messageInfo_CloudTokenData.Size(m)
}
func (m *CloudTokenData) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudTokenData.DiscardUnknown(m)
}

var xxx_messageInfo_CloudTokenData proto.InternalMessageInfo

func (m *CloudTokenData) GetSuffix() string {
	if m != nil && m.Suffix != nil {
		return *m.Suffix
	}
	return ""
}

func (m *CloudTokenData) GetExpMonth() int32 {
	if m != nil && m.ExpMonth != nil {
		return *m.ExpMonth
	}
	return 0
}

func (m *CloudTokenData) GetExpYear() int32 {
	if m != nil && m.ExpYear != nil {
		return *m.ExpYear
	}
	return 0
}

func (m *CloudTokenData) GetArtFifeUrl() string {
	if m != nil && m.ArtFifeUrl != nil {
		return *m.ArtFifeUrl
	}
	return ""
}

func (m *CloudTokenData) GetInstrumentToken() string {
	if m != nil && m.InstrumentToken != nil {
		return *m.InstrumentToken
	}
	return ""
}

type WalletMaskedCreditCard struct {
	// Server-generated unique ID string. This is opaque to the client.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// What the server thinks of this card.
	Status     *WalletMaskedCreditCard_WalletCardStatus `protobuf:"varint,2,opt,name=status,enum=sync_pb.WalletMaskedCreditCard_WalletCardStatus" json:"status,omitempty"`
	NameOnCard *string                                  `protobuf:"bytes,3,opt,name=name_on_card,json=nameOnCard" json:"name_on_card,omitempty"`
	Type       *WalletMaskedCreditCard_WalletCardType   `protobuf:"varint,4,opt,name=type,enum=sync_pb.WalletMaskedCreditCard_WalletCardType" json:"type,omitempty"`
	// Last 4 digits of the credit card number.
	LastFour *string `protobuf:"bytes,5,opt,name=last_four,json=lastFour" json:"last_four,omitempty"`
	// Month number 1-12.
	ExpMonth *int32 `protobuf:"varint,6,opt,name=exp_month,json=expMonth" json:"exp_month,omitempty"`
	// Four-digit year (e.g. 2017).
	ExpYear *int32 `protobuf:"varint,7,opt,name=exp_year,json=expYear" json:"exp_year,omitempty"`
	// The WalletPostalAddress.id of the billing address.
	BillingAddressId *string `protobuf:"bytes,8,opt,name=billing_address_id,json=billingAddressId" json:"billing_address_id,omitempty"`
	// Card class: credit, debit, or prepaid.
	CardClass *WalletMaskedCreditCard_WalletCardClass `protobuf:"varint,9,opt,name=card_class,json=cardClass,enum=sync_pb.WalletMaskedCreditCard_WalletCardClass" json:"card_class,omitempty"`
	// Issuing Bank name which is internationalized (e.g. "Chase", "工商银行")
	BankName *string `protobuf:"bytes,10,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
	// TODO(crbug.com/1020740): Deprecated, remove this once dependent change is
	// done.
	// Use WalletCreditCardCloudTokenData instead. This field will be set if
	// a cloud token is available for the instrument.
	CloudTokenData       *CloudTokenData `protobuf:"bytes,11,opt,name=cloud_token_data,json=cloudTokenData" json:"cloud_token_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WalletMaskedCreditCard) Reset()         { *m = WalletMaskedCreditCard{} }
func (m *WalletMaskedCreditCard) String() string { return proto.CompactTextString(m) }
func (*WalletMaskedCreditCard) ProtoMessage()    {}
func (*WalletMaskedCreditCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{3}
}

func (m *WalletMaskedCreditCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletMaskedCreditCard.Unmarshal(m, b)
}
func (m *WalletMaskedCreditCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletMaskedCreditCard.Marshal(b, m, deterministic)
}
func (m *WalletMaskedCreditCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletMaskedCreditCard.Merge(m, src)
}
func (m *WalletMaskedCreditCard) XXX_Size() int {
	return xxx_messageInfo_WalletMaskedCreditCard.Size(m)
}
func (m *WalletMaskedCreditCard) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletMaskedCreditCard.DiscardUnknown(m)
}

var xxx_messageInfo_WalletMaskedCreditCard proto.InternalMessageInfo

func (m *WalletMaskedCreditCard) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WalletMaskedCreditCard) GetStatus() WalletMaskedCreditCard_WalletCardStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return WalletMaskedCreditCard_VALID
}

func (m *WalletMaskedCreditCard) GetNameOnCard() string {
	if m != nil && m.NameOnCard != nil {
		return *m.NameOnCard
	}
	return ""
}

func (m *WalletMaskedCreditCard) GetType() WalletMaskedCreditCard_WalletCardType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return WalletMaskedCreditCard_UNKNOWN
}

func (m *WalletMaskedCreditCard) GetLastFour() string {
	if m != nil && m.LastFour != nil {
		return *m.LastFour
	}
	return ""
}

func (m *WalletMaskedCreditCard) GetExpMonth() int32 {
	if m != nil && m.ExpMonth != nil {
		return *m.ExpMonth
	}
	return 0
}

func (m *WalletMaskedCreditCard) GetExpYear() int32 {
	if m != nil && m.ExpYear != nil {
		return *m.ExpYear
	}
	return 0
}

func (m *WalletMaskedCreditCard) GetBillingAddressId() string {
	if m != nil && m.BillingAddressId != nil {
		return *m.BillingAddressId
	}
	return ""
}

func (m *WalletMaskedCreditCard) GetCardClass() WalletMaskedCreditCard_WalletCardClass {
	if m != nil && m.CardClass != nil {
		return *m.CardClass
	}
	return WalletMaskedCreditCard_UNKNOWN_CARD_CLASS
}

func (m *WalletMaskedCreditCard) GetBankName() string {
	if m != nil && m.BankName != nil {
		return *m.BankName
	}
	return ""
}

func (m *WalletMaskedCreditCard) GetCloudTokenData() *CloudTokenData {
	if m != nil {
		return m.CloudTokenData
	}
	return nil
}

// Different than an AutofillProfile because this represents some known address
// on the server that is pulled down rather than synced between Chromes.
type WalletPostalAddress struct {
	Id            *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RecipientName *string `protobuf:"bytes,12,opt,name=recipient_name,json=recipientName" json:"recipient_name,omitempty"`
	CompanyName   *string `protobuf:"bytes,2,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
	// This is the street address, of which there may be multiple lines. This
	// corresponds to "address_home_line[1|2] in the AutofillProfileSpecifics
	// message above. In some locales there may be more than two lines.
	StreetAddress []string `protobuf:"bytes,3,rep,name=street_address,json=streetAddress" json:"street_address,omitempty"`
	// Also known as "administrative area". This is normally the state or
	// province in most countries.
	Address_1 *string `protobuf:"bytes,4,opt,name=address_1,json=address1" json:"address_1,omitempty"`
	// Also known as "locality". In the US this is the city.
	Address_2 *string `protobuf:"bytes,5,opt,name=address_2,json=address2" json:"address_2,omitempty"`
	// A sub-classification beneath the city, e.g. an inner-city district or
	// suburb. Also known as "dependent_locality"
	Address_3 *string `protobuf:"bytes,6,opt,name=address_3,json=address3" json:"address_3,omitempty"`
	// Used in certain countries. Also known as "sub_dependent_locality".
	Address_4  *string `protobuf:"bytes,7,opt,name=address_4,json=address4" json:"address_4,omitempty"`
	PostalCode *string `protobuf:"bytes,8,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	// Similar to the zipcode column, but used for businesses or organizations
	// that might not be geographically contiguous. The canonical example is
	// CEDEX in France.
	SortingCode  *string `protobuf:"bytes,9,opt,name=sorting_code,json=sortingCode" json:"sorting_code,omitempty"`
	CountryCode  *string `protobuf:"bytes,10,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	LanguageCode *string `protobuf:"bytes,11,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// Phone number. The format is unspecified and will be explicitly ignored.
	PhoneNumber          *string  `protobuf:"bytes,13,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletPostalAddress) Reset()         { *m = WalletPostalAddress{} }
func (m *WalletPostalAddress) String() string { return proto.CompactTextString(m) }
func (*WalletPostalAddress) ProtoMessage()    {}
func (*WalletPostalAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{4}
}

func (m *WalletPostalAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletPostalAddress.Unmarshal(m, b)
}
func (m *WalletPostalAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletPostalAddress.Marshal(b, m, deterministic)
}
func (m *WalletPostalAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletPostalAddress.Merge(m, src)
}
func (m *WalletPostalAddress) XXX_Size() int {
	return xxx_messageInfo_WalletPostalAddress.Size(m)
}
func (m *WalletPostalAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletPostalAddress.DiscardUnknown(m)
}

var xxx_messageInfo_WalletPostalAddress proto.InternalMessageInfo

func (m *WalletPostalAddress) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WalletPostalAddress) GetRecipientName() string {
	if m != nil && m.RecipientName != nil {
		return *m.RecipientName
	}
	return ""
}

func (m *WalletPostalAddress) GetCompanyName() string {
	if m != nil && m.CompanyName != nil {
		return *m.CompanyName
	}
	return ""
}

func (m *WalletPostalAddress) GetStreetAddress() []string {
	if m != nil {
		return m.StreetAddress
	}
	return nil
}

func (m *WalletPostalAddress) GetAddress_1() string {
	if m != nil && m.Address_1 != nil {
		return *m.Address_1
	}
	return ""
}

func (m *WalletPostalAddress) GetAddress_2() string {
	if m != nil && m.Address_2 != nil {
		return *m.Address_2
	}
	return ""
}

func (m *WalletPostalAddress) GetAddress_3() string {
	if m != nil && m.Address_3 != nil {
		return *m.Address_3
	}
	return ""
}

func (m *WalletPostalAddress) GetAddress_4() string {
	if m != nil && m.Address_4 != nil {
		return *m.Address_4
	}
	return ""
}

func (m *WalletPostalAddress) GetPostalCode() string {
	if m != nil && m.PostalCode != nil {
		return *m.PostalCode
	}
	return ""
}

func (m *WalletPostalAddress) GetSortingCode() string {
	if m != nil && m.SortingCode != nil {
		return *m.SortingCode
	}
	return ""
}

func (m *WalletPostalAddress) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *WalletPostalAddress) GetLanguageCode() string {
	if m != nil && m.LanguageCode != nil {
		return *m.LanguageCode
	}
	return ""
}

func (m *WalletPostalAddress) GetPhoneNumber() string {
	if m != nil && m.PhoneNumber != nil {
		return *m.PhoneNumber
	}
	return ""
}

// Contains information about a Payments Customer.
type PaymentsCustomerData struct {
	// The billable customer ID associated with the account.
	Id                   *string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentsCustomerData) Reset()         { *m = PaymentsCustomerData{} }
func (m *PaymentsCustomerData) String() string { return proto.CompactTextString(m) }
func (*PaymentsCustomerData) ProtoMessage()    {}
func (*PaymentsCustomerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{5}
}

func (m *PaymentsCustomerData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentsCustomerData.Unmarshal(m, b)
}
func (m *PaymentsCustomerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentsCustomerData.Marshal(b, m, deterministic)
}
func (m *PaymentsCustomerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentsCustomerData.Merge(m, src)
}
func (m *PaymentsCustomerData) XXX_Size() int {
	return xxx_messageInfo_PaymentsCustomerData.Size(m)
}
func (m *PaymentsCustomerData) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentsCustomerData.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentsCustomerData proto.InternalMessageInfo

func (m *PaymentsCustomerData) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

// Contains information about the cloud token data of server credit cards.
type WalletCreditCardCloudTokenData struct {
	// Server-generated ID string for the card this cloud token data is related
	// to. This should match the id in WalletMaskedCreditCard for to fetch the
	// corresponding actual card data. Note this is not unique across all cloud
	// token data, which means one card can have multiple sets of cloud token data
	// with the same masked_card_id.
	MaskedCardId *string `protobuf:"bytes,1,opt,name=masked_card_id,json=maskedCardId" json:"masked_card_id,omitempty"`
	// Last 4-5 digits of the Cloud Primary Account Number (CPAN).
	Suffix *string `protobuf:"bytes,2,opt,name=suffix" json:"suffix,omitempty"`
	// CPAN Month number 1-12.
	ExpMonth *int32 `protobuf:"varint,3,opt,name=exp_month,json=expMonth" json:"exp_month,omitempty"`
	// CPAN Four-digit year (e.g. 2017).
	ExpYear *int32 `protobuf:"varint,4,opt,name=exp_year,json=expYear" json:"exp_year,omitempty"`
	// URL of the card art to be displayed for CPAN.
	ArtFifeUrl *string `protobuf:"bytes,5,opt,name=art_fife_url,json=artFifeUrl" json:"art_fife_url,omitempty"`
	// Opaque identifier for the cloud token.
	InstrumentToken      *string  `protobuf:"bytes,6,opt,name=instrument_token,json=instrumentToken" json:"instrument_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletCreditCardCloudTokenData) Reset()         { *m = WalletCreditCardCloudTokenData{} }
func (m *WalletCreditCardCloudTokenData) String() string { return proto.CompactTextString(m) }
func (*WalletCreditCardCloudTokenData) ProtoMessage()    {}
func (*WalletCreditCardCloudTokenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{6}
}

func (m *WalletCreditCardCloudTokenData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletCreditCardCloudTokenData.Unmarshal(m, b)
}
func (m *WalletCreditCardCloudTokenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletCreditCardCloudTokenData.Marshal(b, m, deterministic)
}
func (m *WalletCreditCardCloudTokenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletCreditCardCloudTokenData.Merge(m, src)
}
func (m *WalletCreditCardCloudTokenData) XXX_Size() int {
	return xxx_messageInfo_WalletCreditCardCloudTokenData.Size(m)
}
func (m *WalletCreditCardCloudTokenData) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletCreditCardCloudTokenData.DiscardUnknown(m)
}

var xxx_messageInfo_WalletCreditCardCloudTokenData proto.InternalMessageInfo

func (m *WalletCreditCardCloudTokenData) GetMaskedCardId() string {
	if m != nil && m.MaskedCardId != nil {
		return *m.MaskedCardId
	}
	return ""
}

func (m *WalletCreditCardCloudTokenData) GetSuffix() string {
	if m != nil && m.Suffix != nil {
		return *m.Suffix
	}
	return ""
}

func (m *WalletCreditCardCloudTokenData) GetExpMonth() int32 {
	if m != nil && m.ExpMonth != nil {
		return *m.ExpMonth
	}
	return 0
}

func (m *WalletCreditCardCloudTokenData) GetExpYear() int32 {
	if m != nil && m.ExpYear != nil {
		return *m.ExpYear
	}
	return 0
}

func (m *WalletCreditCardCloudTokenData) GetArtFifeUrl() string {
	if m != nil && m.ArtFifeUrl != nil {
		return *m.ArtFifeUrl
	}
	return ""
}

func (m *WalletCreditCardCloudTokenData) GetInstrumentToken() string {
	if m != nil && m.InstrumentToken != nil {
		return *m.InstrumentToken
	}
	return ""
}

type AutofillWalletSpecifics struct {
	Type *AutofillWalletSpecifics_WalletInfoType `protobuf:"varint,1,opt,name=type,enum=sync_pb.AutofillWalletSpecifics_WalletInfoType" json:"type,omitempty"`
	// This field exists if and only if the "type" field equals to
	// MASKED_CREDIT_CARD.
	MaskedCard *WalletMaskedCreditCard `protobuf:"bytes,2,opt,name=masked_card,json=maskedCard" json:"masked_card,omitempty"`
	// This field exists if and only if the "type" field equals to ADDRESS.
	Address *WalletPostalAddress `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	// This field exists if and only if the "type" field equals to CUSTOMER_DATA.
	CustomerData *PaymentsCustomerData `protobuf:"bytes,4,opt,name=customer_data,json=customerData" json:"customer_data,omitempty"`
	// This field exists if and only if the "type" field equals to
	// CREDIT_CARD_CLOUD_TOKEN_DATA.
	CloudTokenData       *WalletCreditCardCloudTokenData `protobuf:"bytes,5,opt,name=cloud_token_data,json=cloudTokenData" json:"cloud_token_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *AutofillWalletSpecifics) Reset()         { *m = AutofillWalletSpecifics{} }
func (m *AutofillWalletSpecifics) String() string { return proto.CompactTextString(m) }
func (*AutofillWalletSpecifics) ProtoMessage()    {}
func (*AutofillWalletSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{7}
}

func (m *AutofillWalletSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutofillWalletSpecifics.Unmarshal(m, b)
}
func (m *AutofillWalletSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutofillWalletSpecifics.Marshal(b, m, deterministic)
}
func (m *AutofillWalletSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutofillWalletSpecifics.Merge(m, src)
}
func (m *AutofillWalletSpecifics) XXX_Size() int {
	return xxx_messageInfo_AutofillWalletSpecifics.Size(m)
}
func (m *AutofillWalletSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_AutofillWalletSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_AutofillWalletSpecifics proto.InternalMessageInfo

func (m *AutofillWalletSpecifics) GetType() AutofillWalletSpecifics_WalletInfoType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AutofillWalletSpecifics_UNKNOWN
}

func (m *AutofillWalletSpecifics) GetMaskedCard() *WalletMaskedCreditCard {
	if m != nil {
		return m.MaskedCard
	}
	return nil
}

func (m *AutofillWalletSpecifics) GetAddress() *WalletPostalAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AutofillWalletSpecifics) GetCustomerData() *PaymentsCustomerData {
	if m != nil {
		return m.CustomerData
	}
	return nil
}

func (m *AutofillWalletSpecifics) GetCloudTokenData() *WalletCreditCardCloudTokenData {
	if m != nil {
		return m.CloudTokenData
	}
	return nil
}

// Wallet card and address usage information that can be synced.
type WalletMetadataSpecifics struct {
	// The type of the Wallet metadata.
	Type *WalletMetadataSpecifics_Type `protobuf:"varint,1,opt,name=type,enum=sync_pb.WalletMetadataSpecifics_Type" json:"type,omitempty"`
	// Base64 encoding of the unique ID string of the corresponding Wallet data.
	// For Wallet cards, this value is server generated and opaque to Chrome.
	// For Wallet addresses, this is a SHA1 hash of the following fields:
	//
	// - First name
	// - Middle name
	// - Last name
	// - Company name
	// - Street address
	// - Dependent locality
	// - City
	// - State
	// - Zip code
	// - Sorting code
	// - Country
	// - Phone number
	// - Language code
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// The number of times that this Wallet card or address was used.
	UseCount *int64 `protobuf:"varint,3,opt,name=use_count,json=useCount" json:"use_count,omitempty"`
	// The last use date of this Wallet card or address. Measured in microseconds
	// since the Windows epoch (1601).
	UseDate *int64 `protobuf:"varint,4,opt,name=use_date,json=useDate" json:"use_date,omitempty"`
	// The id of the profile/address that represents the billing address of this
	// Wallet card.
	CardBillingAddressId *string `protobuf:"bytes,5,opt,name=card_billing_address_id,json=cardBillingAddressId" json:"card_billing_address_id,omitempty"`
	// Whether this Wallet address has been converted to a local autofill profile.
	AddressHasConverted  *bool    `protobuf:"varint,6,opt,name=address_has_converted,json=addressHasConverted" json:"address_has_converted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletMetadataSpecifics) Reset()         { *m = WalletMetadataSpecifics{} }
func (m *WalletMetadataSpecifics) String() string { return proto.CompactTextString(m) }
func (*WalletMetadataSpecifics) ProtoMessage()    {}
func (*WalletMetadataSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b4bc5783c371310, []int{8}
}

func (m *WalletMetadataSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletMetadataSpecifics.Unmarshal(m, b)
}
func (m *WalletMetadataSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletMetadataSpecifics.Marshal(b, m, deterministic)
}
func (m *WalletMetadataSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletMetadataSpecifics.Merge(m, src)
}
func (m *WalletMetadataSpecifics) XXX_Size() int {
	return xxx_messageInfo_WalletMetadataSpecifics.Size(m)
}
func (m *WalletMetadataSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletMetadataSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_WalletMetadataSpecifics proto.InternalMessageInfo

func (m *WalletMetadataSpecifics) GetType() WalletMetadataSpecifics_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return WalletMetadataSpecifics_UNKNOWN
}

func (m *WalletMetadataSpecifics) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WalletMetadataSpecifics) GetUseCount() int64 {
	if m != nil && m.UseCount != nil {
		return *m.UseCount
	}
	return 0
}

func (m *WalletMetadataSpecifics) GetUseDate() int64 {
	if m != nil && m.UseDate != nil {
		return *m.UseDate
	}
	return 0
}

func (m *WalletMetadataSpecifics) GetCardBillingAddressId() string {
	if m != nil && m.CardBillingAddressId != nil {
		return *m.CardBillingAddressId
	}
	return ""
}

func (m *WalletMetadataSpecifics) GetAddressHasConverted() bool {
	if m != nil && m.AddressHasConverted != nil {
		return *m.AddressHasConverted
	}
	return false
}

func init() {
	proto.RegisterEnum("sync_pb.WalletMaskedCreditCard_WalletCardStatus", WalletMaskedCreditCard_WalletCardStatus_name, WalletMaskedCreditCard_WalletCardStatus_value)
	proto.RegisterEnum("sync_pb.WalletMaskedCreditCard_WalletCardType", WalletMaskedCreditCard_WalletCardType_name, WalletMaskedCreditCard_WalletCardType_value)
	proto.RegisterEnum("sync_pb.WalletMaskedCreditCard_WalletCardClass", WalletMaskedCreditCard_WalletCardClass_name, WalletMaskedCreditCard_WalletCardClass_value)
	proto.RegisterEnum("sync_pb.AutofillWalletSpecifics_WalletInfoType", AutofillWalletSpecifics_WalletInfoType_name, AutofillWalletSpecifics_WalletInfoType_value)
	proto.RegisterEnum("sync_pb.WalletMetadataSpecifics_Type", WalletMetadataSpecifics_Type_name, WalletMetadataSpecifics_Type_value)
	proto.RegisterType((*AutofillProfileSpecifics)(nil), "sync_pb.AutofillProfileSpecifics")
	proto.RegisterType((*AutofillSpecifics)(nil), "sync_pb.AutofillSpecifics")
	proto.RegisterType((*CloudTokenData)(nil), "sync_pb.CloudTokenData")
	proto.RegisterType((*WalletMaskedCreditCard)(nil), "sync_pb.WalletMaskedCreditCard")
	proto.RegisterType((*WalletPostalAddress)(nil), "sync_pb.WalletPostalAddress")
	proto.RegisterType((*PaymentsCustomerData)(nil), "sync_pb.PaymentsCustomerData")
	proto.RegisterType((*WalletCreditCardCloudTokenData)(nil), "sync_pb.WalletCreditCardCloudTokenData")
	proto.RegisterType((*AutofillWalletSpecifics)(nil), "sync_pb.AutofillWalletSpecifics")
	proto.RegisterType((*WalletMetadataSpecifics)(nil), "sync_pb.WalletMetadataSpecifics")
}

func init() {
	proto.RegisterFile("autofill_specifics.proto", fileDescriptor_3b4bc5783c371310)
}

var fileDescriptor_3b4bc5783c371310 = []byte{
	// 1679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xcd, 0x72, 0xdb, 0xc8,
	0x11, 0x36, 0xf8, 0xcf, 0x26, 0x45, 0xc1, 0x63, 0x59, 0x82, 0x63, 0x3b, 0x96, 0xb8, 0x71, 0x56,
	0x71, 0xb6, 0x94, 0x35, 0xf7, 0x27, 0xb5, 0xb5, 0x95, 0xaa, 0x40, 0x20, 0x55, 0x66, 0x2c, 0xfe,
	0x04, 0xa4, 0xec, 0xdd, 0x5c, 0x50, 0x23, 0x60, 0x28, 0x4d, 0x19, 0x04, 0x50, 0xf8, 0x71, 0xc4,
	0x1c, 0xf2, 0x00, 0xb9, 0xe6, 0x11, 0x72, 0xce, 0x29, 0xa7, 0xbc, 0x4b, 0x6e, 0x79, 0x80, 0xbc,
	0x42, 0x6a, 0x7a, 0x00, 0x0a, 0xa0, 0x69, 0xad, 0x4f, 0x04, 0xba, 0xbf, 0x6e, 0xf6, 0xdf, 0x7c,
	0x3d, 0x00, 0x8d, 0x26, 0xb1, 0xbf, 0xe0, 0xae, 0x6b, 0x45, 0x01, 0xb3, 0xf9, 0x82, 0xdb, 0xd1,
	0x49, 0x10, 0xfa, 0xb1, 0x4f, 0xea, 0xd1, 0xca, 0xb3, 0xad, 0xe0, 0xb2, 0xfb, 0x9f, 0x06, 0x68,
	0x7a, 0x8a, 0x9a, 0x86, 0xe2, 0x87, 0xcd, 0x32, 0x2c, 0x21, 0x50, 0xb9, 0x4a, 0xb8, 0xa3, 0xed,
	0x1e, 0x2a, 0xc7, 0x4d, 0x13, 0x9f, 0xc9, 0x3e, 0xd4, 0xfc, 0x90, 0x5f, 0x71, 0x4f, 0x53, 0x51,
	0x9a, 0xbe, 0x91, 0xc7, 0xd0, 0x4c, 0x22, 0x66, 0xd9, 0x7e, 0xe2, 0xc5, 0xda, 0xfe, 0xa1, 0x72,
	0x5c, 0x36, 0x1b, 0x49, 0xc4, 0x0c, 0xf1, 0x4e, 0x1e, 0x81, 0x78, 0xb6, 0x1c, 0x1a, 0x33, 0xed,
	0x00, 0x75, 0xf5, 0x24, 0x62, 0x7d, 0x1a, 0x33, 0xf2, 0x14, 0xc0, 0xa3, 0x4b, 0x66, 0x2d, 0x78,
	0x18, 0xc5, 0x5a, 0xe9, 0xb0, 0x7c, 0xdc, 0x34, 0x9b, 0x42, 0x72, 0x26, 0x04, 0xe4, 0x19, 0xb4,
	0x50, 0xbd, 0xe4, 0x8e, 0xe3, 0x32, 0xad, 0x8c, 0x7a, 0xb4, 0x18, 0xa1, 0x44, 0xfc, 0x2f, 0x02,
	0x5c, 0x1a, 0xc5, 0x5a, 0x05, 0xd5, 0x0d, 0x21, 0x38, 0xa7, 0x51, 0xbc, 0x56, 0x2e, 0x12, 0xd7,
	0xd5, 0x1e, 0xde, 0x2a, 0xcf, 0x12, 0xd7, 0x25, 0x9f, 0xc1, 0x0e, 0x5b, 0x52, 0xee, 0x5a, 0xd4,
	0x71, 0x42, 0x16, 0x45, 0x5a, 0x15, 0x01, 0x6d, 0x14, 0xea, 0x52, 0x46, 0x8e, 0xa0, 0x6d, 0xfb,
	0xcb, 0x80, 0x7a, 0x2b, 0x4b, 0x18, 0x6a, 0x35, 0x4c, 0xba, 0x95, 0xca, 0xc6, 0x74, 0xc9, 0xc8,
	0x17, 0x40, 0x52, 0x0f, 0xd6, 0xb5, 0x2f, 0x22, 0xe1, 0x1e, 0x7b, 0xa9, 0xd5, 0x11, 0xa8, 0xa6,
	0x9a, 0x57, 0xfe, 0x92, 0x9d, 0x0b, 0xf9, 0x56, 0x74, 0x4f, 0x6b, 0x6c, 0x45, 0xf7, 0xc8, 0x0b,
	0xb8, 0x5f, 0x40, 0xdb, 0x3c, 0x5e, 0x69, 0x4d, 0x04, 0xef, 0xe6, 0xc0, 0x06, 0x8f, 0x57, 0x1f,
	0x78, 0x8e, 0x62, 0x51, 0x6e, 0xf8, 0xc0, 0xf3, 0x4c, 0xc8, 0xc9, 0x31, 0xa8, 0x05, 0xf4, 0x5f,
	0x78, 0xa0, 0xb5, 0x10, 0xdb, 0xc9, 0x61, 0xff, 0xc4, 0x03, 0xf2, 0x25, 0xec, 0x15, 0x63, 0x10,
	0x2d, 0x0d, 0x57, 0x5a, 0x1b, 0xd1, 0x24, 0x1f, 0x86, 0xd4, 0x90, 0xdf, 0xc1, 0xe3, 0x8d, 0x48,
	0x42, 0xc6, 0xe2, 0x75, 0x9d, 0xef, 0xa3, 0xa1, 0x56, 0x08, 0x49, 0x00, 0xb2, 0x9a, 0x7f, 0x07,
	0x8f, 0x8a, 0xe6, 0x7e, 0x18, 0x73, 0xef, 0xca, 0xb2, 0x7d, 0x87, 0x69, 0x04, 0x8d, 0xf7, 0xf3,
	0xc6, 0x52, 0x6d, 0xf8, 0x0e, 0x23, 0x03, 0x78, 0x56, 0x30, 0x75, 0x58, 0xc0, 0x3c, 0x87, 0x79,
	0xb1, 0xe5, 0xfa, 0x36, 0x75, 0x45, 0xf5, 0x1e, 0xa0, 0x83, 0x27, 0x39, 0x07, 0xfd, 0x0c, 0x74,
	0x9e, 0x62, 0xc8, 0xf7, 0xf0, 0xb3, 0x62, 0x93, 0xa8, 0x77, 0x95, 0xd0, 0x2b, 0x26, 0x43, 0xd8,
	0x43, 0x0f, 0x07, 0xf9, 0x66, 0xa5, 0x7a, 0x8c, 0xe1, 0x1b, 0x38, 0x08, 0xae, 0x7d, 0x8f, 0x49,
	0xd3, 0x3f, 0x5f, 0xfb, 0x2e, 0xb3, 0xbc, 0x64, 0x79, 0xc9, 0x42, 0x6d, 0x07, 0x27, 0x6c, 0x0f,
	0xd5, 0xc2, 0xee, 0xad, 0x50, 0x8e, 0x51, 0x47, 0xbe, 0x85, 0x83, 0xf7, 0xd4, 0xe5, 0x0e, 0x8f,
	0x57, 0xb2, 0x75, 0xd6, 0x25, 0x8f, 0x17, 0x9c, 0xb9, 0x8e, 0xa6, 0xe1, 0x91, 0x79, 0x98, 0xa9,
	0xb1, 0x81, 0xa7, 0xa9, 0x92, 0xbc, 0x82, 0x23, 0x1e, 0x59, 0xb6, 0xcb, 0x45, 0x96, 0x45, 0x0f,
	0x91, 0x95, 0x04, 0xe2, 0xcc, 0x39, 0xda, 0xa3, 0x43, 0xe5, 0xb8, 0x61, 0x3e, 0xe5, 0x91, 0x81,
	0xb8, 0x37, 0x79, 0x4f, 0xd1, 0x85, 0x04, 0x11, 0x0d, 0xaa, 0x2e, 0xbd, 0x64, 0xae, 0xa6, 0x88,
	0x04, 0x4f, 0x4b, 0x9a, 0x62, 0x4a, 0x01, 0xf9, 0x2d, 0xec, 0xcb, 0x94, 0x16, 0xf4, 0xa6, 0x98,
	0x51, 0x67, 0x0d, 0x7d, 0x80, 0x88, 0x33, 0x7a, 0x93, 0x4b, 0xaa, 0xfb, 0x0f, 0x05, 0xee, 0x67,
	0xf4, 0x52, 0xe0, 0x15, 0x3c, 0x4c, 0x8a, 0xe4, 0x15, 0xf1, 0x4c, 0xf6, 0xa0, 0xfa, 0x9e, 0xba,
	0x09, 0xd3, 0x4a, 0x28, 0x94, 0x2f, 0xe4, 0x73, 0xd8, 0x4d, 0x22, 0x51, 0xf8, 0x98, 0x2f, 0x59,
	0x14, 0xd3, 0x65, 0x80, 0x14, 0x50, 0x36, 0x3b, 0x28, 0x9e, 0x67, 0x52, 0xf2, 0x3d, 0xd4, 0x03,
	0x49, 0x5f, 0x5a, 0xe5, 0x50, 0x39, 0x6e, 0xf5, 0x8e, 0x4e, 0x52, 0x8a, 0x3b, 0xf9, 0x18, 0xbd,
	0x99, 0x99, 0x45, 0xf7, 0x9f, 0x0a, 0x74, 0x0c, 0xd7, 0x4f, 0x9c, 0xb9, 0xff, 0x8e, 0x79, 0x7d,
	0x1a, 0x53, 0x41, 0x73, 0x51, 0xb2, 0x58, 0xf0, 0x9b, 0x34, 0xc8, 0xf4, 0x4d, 0x30, 0x0a, 0xbb,
	0x09, 0xac, 0xa5, 0xef, 0xc5, 0xd7, 0x18, 0x6a, 0xd5, 0x6c, 0xb0, 0x9b, 0x60, 0x24, 0xde, 0x05,
	0xcd, 0x09, 0xe5, 0x8a, 0xd1, 0x50, 0x2b, 0xa3, 0xae, 0xce, 0x6e, 0x82, 0x1f, 0x19, 0x0d, 0xc9,
	0x21, 0xb4, 0x69, 0x18, 0x5b, 0x0b, 0xbe, 0x60, 0x56, 0x12, 0xba, 0x18, 0x64, 0xd3, 0x04, 0x1a,
	0xc6, 0x67, 0x7c, 0xc1, 0x2e, 0x42, 0x97, 0xfc, 0x0a, 0x54, 0xee, 0x45, 0x71, 0x98, 0x2c, 0x45,
	0x23, 0x63, 0x11, 0x89, 0x56, 0x95, 0x27, 0xfd, 0x56, 0x8e, 0x01, 0x76, 0xff, 0x5e, 0x83, 0xfd,
	0xb7, 0xd4, 0x75, 0x59, 0x3c, 0xa2, 0xd1, 0x3b, 0xe6, 0x18, 0x21, 0x73, 0x78, 0x6c, 0xd0, 0xd0,
	0x21, 0x1d, 0x28, 0x71, 0x27, 0x8d, 0xb9, 0xc4, 0xc5, 0x74, 0xd4, 0xc4, 0x28, 0x24, 0x11, 0x06,
	0xdb, 0xe9, 0x7d, 0xb9, 0x2e, 0xcb, 0x76, 0x07, 0xa9, 0x58, 0x3c, 0xce, 0xd0, 0xce, 0x4c, 0xed,
	0x45, 0x06, 0xc8, 0xa5, 0xbe, 0x67, 0xd9, 0x34, 0x74, 0x30, 0xc1, 0x94, 0x8a, 0x27, 0x1e, 0xfe,
	0xf7, 0x29, 0x54, 0xe2, 0x55, 0x20, 0x1b, 0xd0, 0xe9, 0x9d, 0x7c, 0xfa, 0x3f, 0xcd, 0x57, 0x01,
	0x33, 0xd1, 0x56, 0xd4, 0x57, 0x30, 0xb9, 0xb5, 0xf0, 0x93, 0x30, 0x4d, 0xbf, 0x21, 0x04, 0x67,
	0x7e, 0x12, 0x16, 0x8b, 0x5f, 0xbb, 0xa3, 0xf8, 0xf5, 0x62, 0xf1, 0xbf, 0x00, 0x72, 0xc9, 0x5d,
	0x57, 0x70, 0x48, 0x76, 0xac, 0xb9, 0x93, 0x71, 0x6e, 0xaa, 0x49, 0xc9, 0x67, 0xe8, 0x90, 0x31,
	0x80, 0x48, 0xd0, 0xb2, 0x5d, 0x1a, 0x45, 0x48, 0xb6, 0x9d, 0xde, 0x6f, 0x3e, 0x3d, 0x19, 0x43,
	0x98, 0x99, 0x4d, 0x3b, 0x7b, 0x14, 0x51, 0x5f, 0x52, 0xef, 0x9d, 0xdc, 0x1f, 0x92, 0x8e, 0x1b,
	0x42, 0x80, 0xcb, 0x43, 0x07, 0xd5, 0x16, 0x93, 0x27, 0x1b, 0x2e, 0x36, 0x24, 0x45, 0x1a, 0x6e,
	0xf5, 0x0e, 0xd6, 0x7f, 0x59, 0x1c, 0x4d, 0xb3, 0x63, 0x17, 0xde, 0xbb, 0x2f, 0x40, 0xdd, 0x6c,
	0x1a, 0x69, 0x42, 0xf5, 0x8d, 0x7e, 0x3e, 0xec, 0xab, 0xf7, 0x48, 0x0b, 0xea, 0x83, 0x1f, 0xa6,
	0x43, 0x73, 0xd0, 0x57, 0x95, 0xee, 0xdf, 0x14, 0xe8, 0x14, 0xeb, 0x2e, 0xf4, 0x17, 0xe3, 0xd7,
	0xe3, 0xc9, 0xdb, 0xb1, 0x7a, 0x8f, 0x34, 0xa0, 0xa2, 0x8f, 0x06, 0x3f, 0xa8, 0x0a, 0x69, 0x43,
	0xa3, 0x3f, 0x9c, 0x19, 0x93, 0x37, 0x03, 0x53, 0x2d, 0x91, 0x3a, 0x94, 0xff, 0x60, 0x9c, 0xaa,
	0x65, 0x81, 0x1e, 0xe9, 0x83, 0xd9, 0xdc, 0x9c, 0xa8, 0x15, 0xb2, 0x0b, 0xad, 0x91, 0x3e, 0x9b,
	0x0f, 0x4c, 0xcb, 0xd0, 0xcd, 0xbe, 0x5a, 0x15, 0xe6, 0xb3, 0xc9, 0xf9, 0x44, 0xad, 0x11, 0x80,
	0xda, 0xec, 0xed, 0x70, 0x6e, 0xbc, 0x52, 0xeb, 0x42, 0xfa, 0x66, 0x38, 0xd3, 0xd5, 0x86, 0x70,
	0x7a, 0x31, 0x1e, 0x4e, 0xc6, 0x53, 0xfd, 0x47, 0xb5, 0xd9, 0x1d, 0xc1, 0xee, 0x46, 0xd9, 0xc8,
	0x3e, 0x90, 0x34, 0x18, 0x74, 0x69, 0x19, 0xe7, 0xfa, 0x6c, 0xa6, 0xde, 0x13, 0xee, 0x0c, 0x73,
	0xd0, 0x1f, 0xce, 0x55, 0x45, 0xe4, 0xd6, 0x1f, 0x9c, 0x0e, 0xe7, 0x6a, 0x49, 0x44, 0x33, 0x35,
	0x07, 0x53, 0x7d, 0xd8, 0x57, 0xcb, 0xdd, 0x7f, 0x97, 0xe1, 0x81, 0xf4, 0x37, 0xf5, 0xa3, 0x98,
	0xae, 0x57, 0xf8, 0xe6, 0x91, 0x78, 0x0e, 0x9d, 0x90, 0xd9, 0x3c, 0x40, 0xc2, 0xc4, 0xa6, 0xc8,
	0x4d, 0xb6, 0xb3, 0x96, 0x62, 0x67, 0x36, 0x37, 0x7f, 0xe9, 0xc3, 0xcd, 0xff, 0x1c, 0x3a, 0x1b,
	0xab, 0x4d, 0xde, 0x4f, 0x76, 0xa2, 0xc2, 0x3e, 0x7b, 0x0c, 0xcd, 0x6c, 0xec, 0x5e, 0xa6, 0x07,
	0xbf, 0x91, 0x0a, 0x5e, 0xe6, 0x95, 0xbd, 0x6c, 0xe0, 0x53, 0x41, 0x2f, 0xaf, 0xfc, 0x2a, 0xbd,
	0x7a, 0x64, 0xca, 0xaf, 0xf2, 0xca, 0xaf, 0xd3, 0xeb, 0x46, 0xa6, 0xfc, 0x5a, 0xdc, 0x9b, 0x02,
	0xac, 0x82, 0x5c, 0x59, 0x72, 0xd6, 0x41, 0x8a, 0x70, 0x4b, 0x1d, 0x41, 0xbb, 0xb0, 0x57, 0xe5,
	0xa5, 0xa2, 0x15, 0xe5, 0x96, 0x29, 0x56, 0x00, 0x37, 0xba, 0x84, 0x40, 0x56, 0x01, 0x94, 0x21,
	0xe4, 0x33, 0xd8, 0x29, 0xee, 0x46, 0x79, 0x85, 0x68, 0xbb, 0xf9, 0x85, 0x78, 0x04, 0x6d, 0xb9,
	0x3d, 0xd6, 0x5b, 0x10, 0xfd, 0xa0, 0x2c, 0xdd, 0x13, 0xbf, 0x84, 0xbd, 0x29, 0x5d, 0x09, 0x86,
	0x8b, 0x8c, 0x24, 0x8a, 0xfd, 0x25, 0x0b, 0x91, 0x86, 0x37, 0x7a, 0xd7, 0xfd, 0xaf, 0x02, 0x3f,
	0x4f, 0x67, 0x66, 0x7d, 0xf6, 0x36, 0x98, 0xfb, 0x17, 0xd0, 0x59, 0xe2, 0xe9, 0x44, 0x9a, 0xb2,
	0xd6, 0xe6, 0x6d, 0x29, 0x15, 0x16, 0x43, 0x27, 0xc7, 0xef, 0xa5, 0x8f, 0xf3, 0x7b, 0xf9, 0x0e,
	0x8a, 0xa9, 0xdc, 0xcd, 0xef, 0xd5, 0x4f, 0xe2, 0xf7, 0xda, 0x76, 0x7e, 0xff, 0x5f, 0x19, 0x0e,
	0xb2, 0xad, 0x25, 0xb3, 0xbd, 0xdd, 0x9d, 0x46, 0x4a, 0xb2, 0xca, 0x06, 0x2f, 0x7d, 0x04, 0x9f,
	0x12, 0xd3, 0xd0, 0x5b, 0xf8, 0x39, 0x96, 0xfd, 0x3d, 0xb4, 0x72, 0x35, 0xc2, 0x12, 0xb4, 0x7a,
	0xcf, 0x7e, 0x82, 0xe3, 0x4c, 0xb8, 0xad, 0x20, 0xf9, 0x16, 0xea, 0xb7, 0x33, 0x2f, 0xac, 0x9f,
	0x6c, 0x58, 0x17, 0xce, 0xa0, 0x99, 0x81, 0xc9, 0x29, 0xec, 0xd8, 0x69, 0x83, 0x25, 0xd9, 0xc9,
	0x6d, 0xfd, 0x74, 0x6d, 0xbd, 0x6d, 0x0c, 0xcc, 0xb6, 0x9d, 0x1f, 0x8a, 0x3f, 0x6e, 0xe1, 0xcc,
	0x2a, 0xba, 0xf9, 0x7c, 0x23, 0x88, 0x8f, 0x0d, 0xc9, 0x07, 0x1c, 0xfa, 0xd7, 0x8c, 0x16, 0xb3,
	0x42, 0x15, 0x69, 0x71, 0x1f, 0xc8, 0x48, 0x9f, 0xbd, 0x1e, 0xf4, 0x2d, 0xc9, 0x42, 0x92, 0xef,
	0x14, 0x42, 0xa0, 0x33, 0x9d, 0xcc, 0xe6, 0xfa, 0xb9, 0xa5, 0xf7, 0xfb, 0xe6, 0x60, 0x36, 0x53,
	0x4b, 0xe4, 0x3e, 0xec, 0x18, 0x17, 0xb3, 0xf9, 0x64, 0x34, 0x30, 0xad, 0xbe, 0x3e, 0xd7, 0xd5,
	0x32, 0x39, 0x84, 0x27, 0x39, 0x3b, 0xcb, 0x38, 0x9f, 0x5c, 0xf4, 0xad, 0xf9, 0xe4, 0xf5, 0x60,
	0x2c, 0x11, 0x95, 0xee, 0xbf, 0x4a, 0x70, 0x90, 0x56, 0x9d, 0xc5, 0x54, 0x64, 0x74, 0xdb, 0xf1,
	0xef, 0x0a, 0x1d, 0x7f, 0xbe, 0xd9, 0xa5, 0x4d, 0xfc, 0x49, 0xae, 0xcf, 0xf2, 0xf8, 0x94, 0xd6,
	0xd4, 0x57, 0xf8, 0x48, 0x2b, 0xdf, 0xf1, 0x91, 0x56, 0x29, 0x7e, 0xa4, 0x7d, 0x03, 0x07, 0x78,
	0x98, 0xb6, 0x6c, 0x51, 0x39, 0xe8, 0x7b, 0x42, 0x7d, 0xba, 0xb9, 0x49, 0x7b, 0xf0, 0x70, 0x7d,
	0x8d, 0xa6, 0x91, 0x65, 0xfb, 0xde, 0x7b, 0x16, 0x8a, 0xeb, 0x68, 0x0d, 0xaf, 0xa3, 0x0f, 0xb2,
	0x1b, 0x34, 0x8d, 0x8c, 0x4c, 0xd5, 0x7d, 0x01, 0x95, 0xad, 0x6b, 0x29, 0xad, 0x78, 0x0b, 0xea,
	0xeb, 0x52, 0x9f, 0xfe, 0x1a, 0x9e, 0xfb, 0xe1, 0xd5, 0x89, 0x7d, 0x1d, 0xfa, 0x4b, 0x9e, 0x2c,
	0x4f, 0x04, 0x37, 0xfb, 0x9e, 0x98, 0x1e, 0x2c, 0x92, 0xfc, 0xd6, 0xb5, 0x7d, 0xf7, 0x55, 0x79,
	0xaa, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x97, 0xdb, 0xa0, 0xd8, 0x0d, 0x0f, 0x00, 0x00,
}
