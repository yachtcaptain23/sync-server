// Code generated by protoc-gen-go. DO NOT EDIT.
// source: session_specifics.proto

package sync_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of the window.
type SessionWindow_BrowserType int32

const (
	SessionWindow_TYPE_TABBED     SessionWindow_BrowserType = 1
	SessionWindow_TYPE_POPUP      SessionWindow_BrowserType = 2
	SessionWindow_TYPE_CUSTOM_TAB SessionWindow_BrowserType = 3
)

var SessionWindow_BrowserType_name = map[int32]string{
	1: "TYPE_TABBED",
	2: "TYPE_POPUP",
	3: "TYPE_CUSTOM_TAB",
}

var SessionWindow_BrowserType_value = map[string]int32{
	"TYPE_TABBED":     1,
	"TYPE_POPUP":      2,
	"TYPE_CUSTOM_TAB": 3,
}

func (x SessionWindow_BrowserType) Enum() *SessionWindow_BrowserType {
	p := new(SessionWindow_BrowserType)
	*p = x
	return p
}

func (x SessionWindow_BrowserType) String() string {
	return proto.EnumName(SessionWindow_BrowserType_name, int32(x))
}

func (x *SessionWindow_BrowserType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionWindow_BrowserType_value, data, "SessionWindow_BrowserType")
	if err != nil {
		return err
	}
	*x = SessionWindow_BrowserType(value)
	return nil
}

func (SessionWindow_BrowserType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{2, 0}
}

// The type of favicon. For now only normal web favicons are supported.
type SessionTab_FaviconType int32

const (
	SessionTab_TYPE_WEB_FAVICON SessionTab_FaviconType = 1
)

var SessionTab_FaviconType_name = map[int32]string{
	1: "TYPE_WEB_FAVICON",
}

var SessionTab_FaviconType_value = map[string]int32{
	"TYPE_WEB_FAVICON": 1,
}

func (x SessionTab_FaviconType) Enum() *SessionTab_FaviconType {
	p := new(SessionTab_FaviconType)
	*p = x
	return p
}

func (x SessionTab_FaviconType) String() string {
	return proto.EnumName(SessionTab_FaviconType_name, int32(x))
}

func (x *SessionTab_FaviconType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionTab_FaviconType_value, data, "SessionTab_FaviconType")
	if err != nil {
		return err
	}
	*x = SessionTab_FaviconType(value)
	return nil
}

func (SessionTab_FaviconType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{3, 0}
}

type TabNavigation_BlockedState int32

const (
	TabNavigation_STATE_ALLOWED TabNavigation_BlockedState = 1
	TabNavigation_STATE_BLOCKED TabNavigation_BlockedState = 2
)

var TabNavigation_BlockedState_name = map[int32]string{
	1: "STATE_ALLOWED",
	2: "STATE_BLOCKED",
}

var TabNavigation_BlockedState_value = map[string]int32{
	"STATE_ALLOWED": 1,
	"STATE_BLOCKED": 2,
}

func (x TabNavigation_BlockedState) Enum() *TabNavigation_BlockedState {
	p := new(TabNavigation_BlockedState)
	*p = x
	return p
}

func (x TabNavigation_BlockedState) String() string {
	return proto.EnumName(TabNavigation_BlockedState_name, int32(x))
}

func (x *TabNavigation_BlockedState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TabNavigation_BlockedState_value, data, "TabNavigation_BlockedState")
	if err != nil {
		return err
	}
	*x = TabNavigation_BlockedState(value)
	return nil
}

func (TabNavigation_BlockedState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{4, 0}
}

type TabNavigation_PasswordState int32

const (
	TabNavigation_PASSWORD_STATE_UNKNOWN TabNavigation_PasswordState = 0
	TabNavigation_NO_PASSWORD_FIELD      TabNavigation_PasswordState = 1
	TabNavigation_HAS_PASSWORD_FIELD     TabNavigation_PasswordState = 2
)

var TabNavigation_PasswordState_name = map[int32]string{
	0: "PASSWORD_STATE_UNKNOWN",
	1: "NO_PASSWORD_FIELD",
	2: "HAS_PASSWORD_FIELD",
}

var TabNavigation_PasswordState_value = map[string]int32{
	"PASSWORD_STATE_UNKNOWN": 0,
	"NO_PASSWORD_FIELD":      1,
	"HAS_PASSWORD_FIELD":     2,
}

func (x TabNavigation_PasswordState) Enum() *TabNavigation_PasswordState {
	p := new(TabNavigation_PasswordState)
	*p = x
	return p
}

func (x TabNavigation_PasswordState) String() string {
	return proto.EnumName(TabNavigation_PasswordState_name, int32(x))
}

func (x *TabNavigation_PasswordState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TabNavigation_PasswordState_value, data, "TabNavigation_PasswordState")
	if err != nil {
		return err
	}
	*x = TabNavigation_PasswordState(value)
	return nil
}

func (TabNavigation_PasswordState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{4, 1}
}

type SessionSpecifics struct {
	// Unique id for the client.
	SessionTag *string        `protobuf:"bytes,1,opt,name=session_tag,json=sessionTag" json:"session_tag,omitempty"`
	Header     *SessionHeader `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	Tab        *SessionTab    `protobuf:"bytes,3,opt,name=tab" json:"tab,omitempty"`
	// The local tab id used by sync. Unique across all nodes for that client.
	TabNodeId            *int32   `protobuf:"varint,4,opt,name=tab_node_id,json=tabNodeId,def=-1" json:"tab_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionSpecifics) Reset()         { *m = SessionSpecifics{} }
func (m *SessionSpecifics) String() string { return proto.CompactTextString(m) }
func (*SessionSpecifics) ProtoMessage()    {}
func (*SessionSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{0}
}

func (m *SessionSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionSpecifics.Unmarshal(m, b)
}
func (m *SessionSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionSpecifics.Marshal(b, m, deterministic)
}
func (m *SessionSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionSpecifics.Merge(m, src)
}
func (m *SessionSpecifics) XXX_Size() int {
	return xxx_messageInfo_SessionSpecifics.Size(m)
}
func (m *SessionSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_SessionSpecifics proto.InternalMessageInfo

const Default_SessionSpecifics_TabNodeId int32 = -1

func (m *SessionSpecifics) GetSessionTag() string {
	if m != nil && m.SessionTag != nil {
		return *m.SessionTag
	}
	return ""
}

func (m *SessionSpecifics) GetHeader() *SessionHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SessionSpecifics) GetTab() *SessionTab {
	if m != nil {
		return m.Tab
	}
	return nil
}

func (m *SessionSpecifics) GetTabNodeId() int32 {
	if m != nil && m.TabNodeId != nil {
		return *m.TabNodeId
	}
	return Default_SessionSpecifics_TabNodeId
}

// Properties of session sync objects.
type SessionHeader struct {
	// Each session is composed of windows.
	Window []*SessionWindow `protobuf:"bytes,2,rep,name=window" json:"window,omitempty"`
	// A non-unique but human-readable name to describe this client.
	ClientName *string `protobuf:"bytes,3,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	// The type of device.
	DeviceType           *SyncEnums_DeviceType `protobuf:"varint,4,opt,name=device_type,json=deviceType,enum=sync_pb.SyncEnums_DeviceType" json:"device_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SessionHeader) Reset()         { *m = SessionHeader{} }
func (m *SessionHeader) String() string { return proto.CompactTextString(m) }
func (*SessionHeader) ProtoMessage()    {}
func (*SessionHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{1}
}

func (m *SessionHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionHeader.Unmarshal(m, b)
}
func (m *SessionHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionHeader.Marshal(b, m, deterministic)
}
func (m *SessionHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionHeader.Merge(m, src)
}
func (m *SessionHeader) XXX_Size() int {
	return xxx_messageInfo_SessionHeader.Size(m)
}
func (m *SessionHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionHeader.DiscardUnknown(m)
}

var xxx_messageInfo_SessionHeader proto.InternalMessageInfo

func (m *SessionHeader) GetWindow() []*SessionWindow {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *SessionHeader) GetClientName() string {
	if m != nil && m.ClientName != nil {
		return *m.ClientName
	}
	return ""
}

func (m *SessionHeader) GetDeviceType() SyncEnums_DeviceType {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return SyncEnums_TYPE_UNSET
}

type SessionWindow struct {
	// Unique (to the owner) id for this window.
	WindowId *int32 `protobuf:"varint,1,opt,name=window_id,json=windowId" json:"window_id,omitempty"`
	// Index of the selected tab in tabs; -1 if no tab is selected.
	SelectedTabIndex *int32                     `protobuf:"varint,2,opt,name=selected_tab_index,json=selectedTabIndex,def=-1" json:"selected_tab_index,omitempty"`
	BrowserType      *SessionWindow_BrowserType `protobuf:"varint,3,opt,name=browser_type,json=browserType,enum=sync_pb.SessionWindow_BrowserType,def=1" json:"browser_type,omitempty"`
	// The tabs that compose a window (correspond to tab id's).
	Tab                  []int32  `protobuf:"varint,4,rep,name=tab" json:"tab,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionWindow) Reset()         { *m = SessionWindow{} }
func (m *SessionWindow) String() string { return proto.CompactTextString(m) }
func (*SessionWindow) ProtoMessage()    {}
func (*SessionWindow) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{2}
}

func (m *SessionWindow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionWindow.Unmarshal(m, b)
}
func (m *SessionWindow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionWindow.Marshal(b, m, deterministic)
}
func (m *SessionWindow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionWindow.Merge(m, src)
}
func (m *SessionWindow) XXX_Size() int {
	return xxx_messageInfo_SessionWindow.Size(m)
}
func (m *SessionWindow) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionWindow.DiscardUnknown(m)
}

var xxx_messageInfo_SessionWindow proto.InternalMessageInfo

const Default_SessionWindow_SelectedTabIndex int32 = -1
const Default_SessionWindow_BrowserType SessionWindow_BrowserType = SessionWindow_TYPE_TABBED

func (m *SessionWindow) GetWindowId() int32 {
	if m != nil && m.WindowId != nil {
		return *m.WindowId
	}
	return 0
}

func (m *SessionWindow) GetSelectedTabIndex() int32 {
	if m != nil && m.SelectedTabIndex != nil {
		return *m.SelectedTabIndex
	}
	return Default_SessionWindow_SelectedTabIndex
}

func (m *SessionWindow) GetBrowserType() SessionWindow_BrowserType {
	if m != nil && m.BrowserType != nil {
		return *m.BrowserType
	}
	return Default_SessionWindow_BrowserType
}

func (m *SessionWindow) GetTab() []int32 {
	if m != nil {
		return m.Tab
	}
	return nil
}

type SessionTab struct {
	// Unique (to the owner) id for this tab.
	TabId *int32 `protobuf:"varint,1,opt,name=tab_id,json=tabId,def=-1" json:"tab_id,omitempty"`
	// The unique id for the window this tab belongs to.
	WindowId *int32 `protobuf:"varint,2,opt,name=window_id,json=windowId" json:"window_id,omitempty"`
	// Visual index of the tab within its window. There may be gaps in these
	// values.
	TabVisualIndex *int32 `protobuf:"varint,3,opt,name=tab_visual_index,json=tabVisualIndex,def=-1" json:"tab_visual_index,omitempty"`
	// Identifies the index of the current navigation in navigations. For
	// example, if this is 2 it means the current navigation is navigations[2].
	CurrentNavigationIndex *int32 `protobuf:"varint,4,opt,name=current_navigation_index,json=currentNavigationIndex,def=-1" json:"current_navigation_index,omitempty"`
	// True if the tab is pinned.
	Pinned *bool `protobuf:"varint,5,opt,name=pinned,def=0" json:"pinned,omitempty"`
	// If non-empty, this tab is an app tab and this is the id of the extension.
	ExtensionAppId *string `protobuf:"bytes,6,opt,name=extension_app_id,json=extensionAppId" json:"extension_app_id,omitempty"`
	// Tabs are navigated, and the navigation data is here.
	Navigation []*TabNavigation `protobuf:"bytes,7,rep,name=navigation" json:"navigation,omitempty"`
	// The favicon for the current url the tab is displaying. Either empty
	// or a valid PNG encoded favicon.
	Favicon     []byte                  `protobuf:"bytes,8,opt,name=favicon" json:"favicon,omitempty"`                                                                 // Deprecated: Do not use.
	FaviconType *SessionTab_FaviconType `protobuf:"varint,9,opt,name=favicon_type,json=faviconType,enum=sync_pb.SessionTab_FaviconType" json:"favicon_type,omitempty"` // Deprecated: Do not use.
	// The url of the actual favicon (as opposed to the page using the favicon).
	FaviconSource *string `protobuf:"bytes,11,opt,name=favicon_source,json=faviconSource" json:"favicon_source,omitempty"` // Deprecated: Do not use.
	// Ids of the currently assigned variations which should be sent to sync.
	VariationId          []uint64 `protobuf:"varint,12,rep,name=variation_id,json=variationId" json:"variation_id,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionTab) Reset()         { *m = SessionTab{} }
func (m *SessionTab) String() string { return proto.CompactTextString(m) }
func (*SessionTab) ProtoMessage()    {}
func (*SessionTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{3}
}

func (m *SessionTab) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionTab.Unmarshal(m, b)
}
func (m *SessionTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionTab.Marshal(b, m, deterministic)
}
func (m *SessionTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionTab.Merge(m, src)
}
func (m *SessionTab) XXX_Size() int {
	return xxx_messageInfo_SessionTab.Size(m)
}
func (m *SessionTab) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionTab.DiscardUnknown(m)
}

var xxx_messageInfo_SessionTab proto.InternalMessageInfo

const Default_SessionTab_TabId int32 = -1
const Default_SessionTab_TabVisualIndex int32 = -1
const Default_SessionTab_CurrentNavigationIndex int32 = -1
const Default_SessionTab_Pinned bool = false

func (m *SessionTab) GetTabId() int32 {
	if m != nil && m.TabId != nil {
		return *m.TabId
	}
	return Default_SessionTab_TabId
}

func (m *SessionTab) GetWindowId() int32 {
	if m != nil && m.WindowId != nil {
		return *m.WindowId
	}
	return 0
}

func (m *SessionTab) GetTabVisualIndex() int32 {
	if m != nil && m.TabVisualIndex != nil {
		return *m.TabVisualIndex
	}
	return Default_SessionTab_TabVisualIndex
}

func (m *SessionTab) GetCurrentNavigationIndex() int32 {
	if m != nil && m.CurrentNavigationIndex != nil {
		return *m.CurrentNavigationIndex
	}
	return Default_SessionTab_CurrentNavigationIndex
}

func (m *SessionTab) GetPinned() bool {
	if m != nil && m.Pinned != nil {
		return *m.Pinned
	}
	return Default_SessionTab_Pinned
}

func (m *SessionTab) GetExtensionAppId() string {
	if m != nil && m.ExtensionAppId != nil {
		return *m.ExtensionAppId
	}
	return ""
}

func (m *SessionTab) GetNavigation() []*TabNavigation {
	if m != nil {
		return m.Navigation
	}
	return nil
}

// Deprecated: Do not use.
func (m *SessionTab) GetFavicon() []byte {
	if m != nil {
		return m.Favicon
	}
	return nil
}

// Deprecated: Do not use.
func (m *SessionTab) GetFaviconType() SessionTab_FaviconType {
	if m != nil && m.FaviconType != nil {
		return *m.FaviconType
	}
	return SessionTab_TYPE_WEB_FAVICON
}

// Deprecated: Do not use.
func (m *SessionTab) GetFaviconSource() string {
	if m != nil && m.FaviconSource != nil {
		return *m.FaviconSource
	}
	return ""
}

// Deprecated: Do not use.
func (m *SessionTab) GetVariationId() []uint64 {
	if m != nil {
		return m.VariationId
	}
	return nil
}

type TabNavigation struct {
	// The index in the NavigationController. If this is -1, it means this
	// TabNavigation is bogus.
	// optional int32 index = 1 [default = -1];  // obsolete.
	// The virtual URL, when nonempty, will override the actual URL of the page
	// when we display it to the user.
	VirtualUrl *string `protobuf:"bytes,2,opt,name=virtual_url,json=virtualUrl" json:"virtual_url,omitempty"`
	// The referring URL, which can be empty.
	Referrer *string `protobuf:"bytes,3,opt,name=referrer" json:"referrer,omitempty"`
	// The title of the page.
	Title *string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	// Content state is an opaque blob created by WebKit that represents the
	// state of the page. This includes form entries and scroll position for each
	// frame.
	// optional string state = 5;  // obsolete.
	// The core transition type.
	PageTransition *SyncEnums_PageTransition `protobuf:"varint,6,opt,name=page_transition,json=pageTransition,enum=sync_pb.SyncEnums_PageTransition,def=0" json:"page_transition,omitempty"`
	// If this transition was triggered by a redirect, the redirect type.
	RedirectType *SyncEnums_PageTransitionRedirectType `protobuf:"varint,7,opt,name=redirect_type,json=redirectType,enum=sync_pb.SyncEnums_PageTransitionRedirectType" json:"redirect_type,omitempty"`
	// The unique navigation id (within this client).
	UniqueId *int32 `protobuf:"varint,8,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	// Timestamp for when this navigation last occurred (in client time).
	// If the user goes back/forward in history the timestamp may refresh.
	TimestampMsec *int64 `protobuf:"varint,9,opt,name=timestamp_msec,json=timestampMsec" json:"timestamp_msec,omitempty"`
	// User used the Forward or Back button to navigate among browsing history.
	NavigationForwardBack *bool `protobuf:"varint,10,opt,name=navigation_forward_back,json=navigationForwardBack" json:"navigation_forward_back,omitempty"`
	// User used the address bar to trigger this navigation.
	NavigationFromAddressBar *bool `protobuf:"varint,11,opt,name=navigation_from_address_bar,json=navigationFromAddressBar" json:"navigation_from_address_bar,omitempty"`
	// User is navigating to the home page.
	NavigationHomePage *bool `protobuf:"varint,12,opt,name=navigation_home_page,json=navigationHomePage" json:"navigation_home_page,omitempty"`
	// The beginning of a navigation chain.
	NavigationChainStart *bool `protobuf:"varint,13,opt,name=navigation_chain_start,json=navigationChainStart" json:"navigation_chain_start,omitempty"`
	// The last transition in a redirect chain.
	NavigationChainEnd *bool `protobuf:"varint,14,opt,name=navigation_chain_end,json=navigationChainEnd" json:"navigation_chain_end,omitempty"`
	// The id for this navigation, which is globally unique with high
	// probability.
	GlobalId *int64 `protobuf:"varint,15,opt,name=global_id,json=globalId" json:"global_id,omitempty"`
	// Search terms extracted from the URL.
	SearchTerms *string `protobuf:"bytes,16,opt,name=search_terms,json=searchTerms" json:"search_terms,omitempty"` // Deprecated: Do not use.
	// The favicon url associated with this page.
	FaviconUrl *string `protobuf:"bytes,17,opt,name=favicon_url,json=faviconUrl" json:"favicon_url,omitempty"`
	// Whether access to the URL was allowed or blocked.
	BlockedState *TabNavigation_BlockedState `protobuf:"varint,18,opt,name=blocked_state,json=blockedState,enum=sync_pb.TabNavigation_BlockedState,def=1" json:"blocked_state,omitempty"`
	// A list of category identifiers for the URL.
	ContentPackCategories []string `protobuf:"bytes,19,rep,name=content_pack_categories,json=contentPackCategories" json:"content_pack_categories,omitempty"`
	// The status code from the last navigation.
	HttpStatusCode *int32 `protobuf:"varint,20,opt,name=http_status_code,json=httpStatusCode" json:"http_status_code,omitempty"`
	// Referrer policy. Old, broken value. Deprecated in M61.
	ObsoleteReferrerPolicy *int32 `protobuf:"varint,21,opt,name=obsolete_referrer_policy,json=obsoleteReferrerPolicy" json:"obsolete_referrer_policy,omitempty"` // Deprecated: Do not use.
	// True if created from restored navigation entry that hasn't been loaded.
	IsRestored *bool `protobuf:"varint,22,opt,name=is_restored,json=isRestored" json:"is_restored,omitempty"`
	// The chain of redirections for this navigation, from the original URL
	// through the last URL that redirected.
	NavigationRedirect []*NavigationRedirect `protobuf:"bytes,23,rep,name=navigation_redirect,json=navigationRedirect" json:"navigation_redirect,omitempty"`
	// Normally not present.
	// The last URL traversed when different from the virtual_url.
	LastNavigationRedirectUrl *string `protobuf:"bytes,24,opt,name=last_navigation_redirect_url,json=lastNavigationRedirectUrl" json:"last_navigation_redirect_url,omitempty"`
	// Correct referrer policy. Valid enums are defined in
	// third_party/WebKit/public/platform/WebReferrerPolicy.h.
	CorrectReferrerPolicy *int32 `protobuf:"varint,25,opt,name=correct_referrer_policy,json=correctReferrerPolicy,def=1" json:"correct_referrer_policy,omitempty"`
	// Whether the Password Manager saw a password field on the page.
	PasswordState *TabNavigation_PasswordState `protobuf:"varint,26,opt,name=password_state,json=passwordState,enum=sync_pb.TabNavigation_PasswordState" json:"password_state,omitempty"`
	// The id for the task associated with this navigation, which is globally
	// unique with high probability.
	// Similar with global_id, but used to identify a navigation in Chrome Tasks,
	// so navigations of a page have the same task_id if one is the first visit of
	// the page, and others are its back/forward visits.
	TaskId *int64 `protobuf:"varint,27,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// Task ids of all ancestor navigations, which can be from other tabs, from
	// root to parent. We define navigation A is parent of navigation B if page of
	// B is got by clicking a link on page of A. This relationship is used to
	// define a Chrome Task as a tree rooted by a navigation.
	AncestorTaskId []int64 `protobuf:"varint,28,rep,name=ancestor_task_id,json=ancestorTaskId" json:"ancestor_task_id,omitempty"`
	// When a history entry is replaced (e.g. history.replaceState()), this
	// contains some information about the entry prior to being replaced. Even if
	// an entry is replaced multiple times, it represents data prior to the
	// *first* replace.
	ReplacedNavigation *ReplacedNavigation `protobuf:"bytes,29,opt,name=replaced_navigation,json=replacedNavigation" json:"replaced_navigation,omitempty"`
	// The page language as determined by its textual content. An ISO 639 language
	// code (two letters, except for Chinese where a localization is necessary).
	PageLanguage         *string  `protobuf:"bytes,30,opt,name=page_language,json=pageLanguage" json:"page_language,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TabNavigation) Reset()         { *m = TabNavigation{} }
func (m *TabNavigation) String() string { return proto.CompactTextString(m) }
func (*TabNavigation) ProtoMessage()    {}
func (*TabNavigation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{4}
}

func (m *TabNavigation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TabNavigation.Unmarshal(m, b)
}
func (m *TabNavigation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TabNavigation.Marshal(b, m, deterministic)
}
func (m *TabNavigation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabNavigation.Merge(m, src)
}
func (m *TabNavigation) XXX_Size() int {
	return xxx_messageInfo_TabNavigation.Size(m)
}
func (m *TabNavigation) XXX_DiscardUnknown() {
	xxx_messageInfo_TabNavigation.DiscardUnknown(m)
}

var xxx_messageInfo_TabNavigation proto.InternalMessageInfo

const Default_TabNavigation_PageTransition SyncEnums_PageTransition = SyncEnums_LINK
const Default_TabNavigation_BlockedState TabNavigation_BlockedState = TabNavigation_STATE_ALLOWED
const Default_TabNavigation_CorrectReferrerPolicy int32 = 1

func (m *TabNavigation) GetVirtualUrl() string {
	if m != nil && m.VirtualUrl != nil {
		return *m.VirtualUrl
	}
	return ""
}

func (m *TabNavigation) GetReferrer() string {
	if m != nil && m.Referrer != nil {
		return *m.Referrer
	}
	return ""
}

func (m *TabNavigation) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *TabNavigation) GetPageTransition() SyncEnums_PageTransition {
	if m != nil && m.PageTransition != nil {
		return *m.PageTransition
	}
	return Default_TabNavigation_PageTransition
}

func (m *TabNavigation) GetRedirectType() SyncEnums_PageTransitionRedirectType {
	if m != nil && m.RedirectType != nil {
		return *m.RedirectType
	}
	return SyncEnums_CLIENT_REDIRECT
}

func (m *TabNavigation) GetUniqueId() int32 {
	if m != nil && m.UniqueId != nil {
		return *m.UniqueId
	}
	return 0
}

func (m *TabNavigation) GetTimestampMsec() int64 {
	if m != nil && m.TimestampMsec != nil {
		return *m.TimestampMsec
	}
	return 0
}

func (m *TabNavigation) GetNavigationForwardBack() bool {
	if m != nil && m.NavigationForwardBack != nil {
		return *m.NavigationForwardBack
	}
	return false
}

func (m *TabNavigation) GetNavigationFromAddressBar() bool {
	if m != nil && m.NavigationFromAddressBar != nil {
		return *m.NavigationFromAddressBar
	}
	return false
}

func (m *TabNavigation) GetNavigationHomePage() bool {
	if m != nil && m.NavigationHomePage != nil {
		return *m.NavigationHomePage
	}
	return false
}

func (m *TabNavigation) GetNavigationChainStart() bool {
	if m != nil && m.NavigationChainStart != nil {
		return *m.NavigationChainStart
	}
	return false
}

func (m *TabNavigation) GetNavigationChainEnd() bool {
	if m != nil && m.NavigationChainEnd != nil {
		return *m.NavigationChainEnd
	}
	return false
}

func (m *TabNavigation) GetGlobalId() int64 {
	if m != nil && m.GlobalId != nil {
		return *m.GlobalId
	}
	return 0
}

// Deprecated: Do not use.
func (m *TabNavigation) GetSearchTerms() string {
	if m != nil && m.SearchTerms != nil {
		return *m.SearchTerms
	}
	return ""
}

func (m *TabNavigation) GetFaviconUrl() string {
	if m != nil && m.FaviconUrl != nil {
		return *m.FaviconUrl
	}
	return ""
}

func (m *TabNavigation) GetBlockedState() TabNavigation_BlockedState {
	if m != nil && m.BlockedState != nil {
		return *m.BlockedState
	}
	return Default_TabNavigation_BlockedState
}

func (m *TabNavigation) GetContentPackCategories() []string {
	if m != nil {
		return m.ContentPackCategories
	}
	return nil
}

func (m *TabNavigation) GetHttpStatusCode() int32 {
	if m != nil && m.HttpStatusCode != nil {
		return *m.HttpStatusCode
	}
	return 0
}

// Deprecated: Do not use.
func (m *TabNavigation) GetObsoleteReferrerPolicy() int32 {
	if m != nil && m.ObsoleteReferrerPolicy != nil {
		return *m.ObsoleteReferrerPolicy
	}
	return 0
}

func (m *TabNavigation) GetIsRestored() bool {
	if m != nil && m.IsRestored != nil {
		return *m.IsRestored
	}
	return false
}

func (m *TabNavigation) GetNavigationRedirect() []*NavigationRedirect {
	if m != nil {
		return m.NavigationRedirect
	}
	return nil
}

func (m *TabNavigation) GetLastNavigationRedirectUrl() string {
	if m != nil && m.LastNavigationRedirectUrl != nil {
		return *m.LastNavigationRedirectUrl
	}
	return ""
}

func (m *TabNavigation) GetCorrectReferrerPolicy() int32 {
	if m != nil && m.CorrectReferrerPolicy != nil {
		return *m.CorrectReferrerPolicy
	}
	return Default_TabNavigation_CorrectReferrerPolicy
}

func (m *TabNavigation) GetPasswordState() TabNavigation_PasswordState {
	if m != nil && m.PasswordState != nil {
		return *m.PasswordState
	}
	return TabNavigation_PASSWORD_STATE_UNKNOWN
}

func (m *TabNavigation) GetTaskId() int64 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *TabNavigation) GetAncestorTaskId() []int64 {
	if m != nil {
		return m.AncestorTaskId
	}
	return nil
}

func (m *TabNavigation) GetReplacedNavigation() *ReplacedNavigation {
	if m != nil {
		return m.ReplacedNavigation
	}
	return nil
}

func (m *TabNavigation) GetPageLanguage() string {
	if m != nil && m.PageLanguage != nil {
		return *m.PageLanguage
	}
	return ""
}

// Navigation information for a single redirection within a single navigation.
type NavigationRedirect struct {
	// A URL that redirected while navigating to the virtual_url.
	Url                  *string  `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NavigationRedirect) Reset()         { *m = NavigationRedirect{} }
func (m *NavigationRedirect) String() string { return proto.CompactTextString(m) }
func (*NavigationRedirect) ProtoMessage()    {}
func (*NavigationRedirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{5}
}

func (m *NavigationRedirect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NavigationRedirect.Unmarshal(m, b)
}
func (m *NavigationRedirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NavigationRedirect.Marshal(b, m, deterministic)
}
func (m *NavigationRedirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NavigationRedirect.Merge(m, src)
}
func (m *NavigationRedirect) XXX_Size() int {
	return xxx_messageInfo_NavigationRedirect.Size(m)
}
func (m *NavigationRedirect) XXX_DiscardUnknown() {
	xxx_messageInfo_NavigationRedirect.DiscardUnknown(m)
}

var xxx_messageInfo_NavigationRedirect proto.InternalMessageInfo

func (m *NavigationRedirect) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

// Subset of TabNavigation fields representing a navigation that was later
// replaced in history (e.g. history.replaceState()), which allows tracking
// information about the original navigation prior to the first replacement.
type ReplacedNavigation struct {
	FirstCommittedUrl    *string                   `protobuf:"bytes,1,opt,name=first_committed_url,json=firstCommittedUrl" json:"first_committed_url,omitempty"`
	FirstTimestampMsec   *int64                    `protobuf:"varint,2,opt,name=first_timestamp_msec,json=firstTimestampMsec" json:"first_timestamp_msec,omitempty"`
	FirstPageTransition  *SyncEnums_PageTransition `protobuf:"varint,3,opt,name=first_page_transition,json=firstPageTransition,enum=sync_pb.SyncEnums_PageTransition" json:"first_page_transition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ReplacedNavigation) Reset()         { *m = ReplacedNavigation{} }
func (m *ReplacedNavigation) String() string { return proto.CompactTextString(m) }
func (*ReplacedNavigation) ProtoMessage()    {}
func (*ReplacedNavigation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7959ad9b6480df5, []int{6}
}

func (m *ReplacedNavigation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplacedNavigation.Unmarshal(m, b)
}
func (m *ReplacedNavigation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplacedNavigation.Marshal(b, m, deterministic)
}
func (m *ReplacedNavigation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplacedNavigation.Merge(m, src)
}
func (m *ReplacedNavigation) XXX_Size() int {
	return xxx_messageInfo_ReplacedNavigation.Size(m)
}
func (m *ReplacedNavigation) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplacedNavigation.DiscardUnknown(m)
}

var xxx_messageInfo_ReplacedNavigation proto.InternalMessageInfo

func (m *ReplacedNavigation) GetFirstCommittedUrl() string {
	if m != nil && m.FirstCommittedUrl != nil {
		return *m.FirstCommittedUrl
	}
	return ""
}

func (m *ReplacedNavigation) GetFirstTimestampMsec() int64 {
	if m != nil && m.FirstTimestampMsec != nil {
		return *m.FirstTimestampMsec
	}
	return 0
}

func (m *ReplacedNavigation) GetFirstPageTransition() SyncEnums_PageTransition {
	if m != nil && m.FirstPageTransition != nil {
		return *m.FirstPageTransition
	}
	return SyncEnums_LINK
}

func init() {
	proto.RegisterEnum("sync_pb.SessionWindow_BrowserType", SessionWindow_BrowserType_name, SessionWindow_BrowserType_value)
	proto.RegisterEnum("sync_pb.SessionTab_FaviconType", SessionTab_FaviconType_name, SessionTab_FaviconType_value)
	proto.RegisterEnum("sync_pb.TabNavigation_BlockedState", TabNavigation_BlockedState_name, TabNavigation_BlockedState_value)
	proto.RegisterEnum("sync_pb.TabNavigation_PasswordState", TabNavigation_PasswordState_name, TabNavigation_PasswordState_value)
	proto.RegisterType((*SessionSpecifics)(nil), "sync_pb.SessionSpecifics")
	proto.RegisterType((*SessionHeader)(nil), "sync_pb.SessionHeader")
	proto.RegisterType((*SessionWindow)(nil), "sync_pb.SessionWindow")
	proto.RegisterType((*SessionTab)(nil), "sync_pb.SessionTab")
	proto.RegisterType((*TabNavigation)(nil), "sync_pb.TabNavigation")
	proto.RegisterType((*NavigationRedirect)(nil), "sync_pb.NavigationRedirect")
	proto.RegisterType((*ReplacedNavigation)(nil), "sync_pb.ReplacedNavigation")
}

func init() {
	proto.RegisterFile("session_specifics.proto", fileDescriptor_e7959ad9b6480df5)
}

var fileDescriptor_e7959ad9b6480df5 = []byte{
	// 1459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xfb, 0x6e, 0xe2, 0xce,
	0x15, 0x2e, 0x90, 0x1b, 0x87, 0x4b, 0xc8, 0xe4, 0xe6, 0x4d, 0x76, 0xfb, 0xa3, 0x6c, 0x53, 0x51,
	0xb5, 0x8b, 0x76, 0x57, 0xab, 0x95, 0x1a, 0xf5, 0x22, 0x20, 0x44, 0x41, 0x61, 0x01, 0x19, 0xb2,
	0x51, 0xfb, 0x8f, 0x35, 0xb6, 0x27, 0xc4, 0x0a, 0xf6, 0xb8, 0x33, 0x43, 0xb2, 0x79, 0x84, 0xfe,
	0xd3, 0x67, 0xe8, 0x13, 0xf4, 0x05, 0xfa, 0x0c, 0x7d, 0xa7, 0x6a, 0xce, 0x18, 0x30, 0x24, 0x55,
	0xfb, 0x9f, 0xfd, 0x9d, 0xef, 0x9c, 0x99, 0xf9, 0xce, 0x37, 0xc7, 0x86, 0x63, 0xc9, 0xa4, 0x0c,
	0x78, 0xe4, 0xc8, 0x98, 0x79, 0xc1, 0x5d, 0xe0, 0xc9, 0x46, 0x2c, 0xb8, 0xe2, 0x64, 0x5b, 0x3e,
	0x47, 0x9e, 0x13, 0xbb, 0x27, 0x15, 0x7c, 0x60, 0xd1, 0x2c, 0x4c, 0x42, 0xb5, 0x7f, 0x66, 0xa0,
	0x32, 0x32, 0x69, 0xa3, 0x79, 0x16, 0xf9, 0x09, 0x0a, 0xf3, 0x52, 0x8a, 0x4e, 0xac, 0x4c, 0x35,
	0x53, 0xcf, 0xdb, 0x90, 0x40, 0x63, 0x3a, 0x21, 0x0d, 0xd8, 0xba, 0x67, 0xd4, 0x67, 0xc2, 0xca,
	0x56, 0x33, 0xf5, 0xc2, 0xe7, 0xa3, 0x46, 0xb2, 0x42, 0x23, 0xa9, 0x75, 0x85, 0x51, 0x3b, 0x61,
	0x91, 0x33, 0xc8, 0x29, 0xea, 0x5a, 0x39, 0x24, 0xef, 0xaf, 0x93, 0xc7, 0xd4, 0xb5, 0x75, 0x9c,
	0xd4, 0xa0, 0xa0, 0xa8, 0xeb, 0x44, 0xdc, 0x67, 0x4e, 0xe0, 0x5b, 0x1b, 0xd5, 0x4c, 0x7d, 0xf3,
	0x3c, 0xfb, 0xe1, 0x93, 0x9d, 0x57, 0xd4, 0xed, 0x73, 0x9f, 0x75, 0xfd, 0xda, 0x3f, 0x32, 0x50,
	0x5a, 0x59, 0x44, 0x6f, 0xe6, 0x29, 0x88, 0x7c, 0xfe, 0x64, 0x65, 0xab, 0xb9, 0xd7, 0x36, 0x73,
	0x8b, 0x51, 0x3b, 0x61, 0xe9, 0xd3, 0x79, 0xd3, 0x80, 0x45, 0xca, 0x89, 0x68, 0xc8, 0x70, 0x53,
	0x79, 0x1b, 0x0c, 0xd4, 0xa7, 0x21, 0x23, 0x7f, 0x84, 0x82, 0xcf, 0x1e, 0x03, 0x8f, 0x39, 0xea,
	0x39, 0x66, 0xb8, 0x8d, 0xf2, 0xe7, 0x77, 0xcb, 0xaa, 0xcf, 0x91, 0xd7, 0x41, 0x09, 0x2f, 0x90,
	0x35, 0x7e, 0x8e, 0x99, 0x0d, 0xfe, 0xe2, 0xb9, 0xf6, 0xb7, 0xec, 0x62, 0x8b, 0x66, 0x69, 0x72,
	0x0a, 0x79, 0xb3, 0xb8, 0x3e, 0x96, 0x96, 0x73, 0xd3, 0xde, 0x31, 0x40, 0xd7, 0x27, 0x1f, 0x81,
	0x48, 0x36, 0x65, 0x9e, 0x62, 0xbe, 0xa3, 0x8f, 0x1f, 0x44, 0x3e, 0xfb, 0x81, 0xc2, 0x9a, 0xc3,
	0x57, 0xe6, 0xd1, 0x31, 0x75, 0xbb, 0x3a, 0x46, 0x6c, 0x28, 0xba, 0x82, 0x3f, 0x49, 0x26, 0xcc,
	0x0e, 0x73, 0xb8, 0xc3, 0xda, 0xeb, 0xe7, 0x6e, 0xb4, 0x0c, 0x55, 0x6f, 0xed, 0xbc, 0x30, 0xfe,
	0xf3, 0xb0, 0xe3, 0x8c, 0x9b, 0xad, 0x56, 0xe7, 0xc2, 0x2e, 0xb8, 0xcb, 0x08, 0xa9, 0x98, 0x16,
	0x6d, 0x54, 0x73, 0xf5, 0x4d, 0xec, 0x46, 0xad, 0x0d, 0x85, 0x54, 0x2a, 0xd9, 0x85, 0x74, 0x72,
	0x25, 0x43, 0xca, 0x00, 0x08, 0x0c, 0x07, 0xc3, 0x9b, 0x61, 0x25, 0x4b, 0xf6, 0x61, 0x17, 0xdf,
	0xdb, 0x37, 0xa3, 0xf1, 0xe0, 0x9b, 0xe6, 0x55, 0x72, 0xb5, 0xbf, 0x6f, 0x00, 0x2c, 0xdb, 0x4c,
	0xde, 0xc0, 0x16, 0x1e, 0x31, 0x51, 0x01, 0xcf, 0xb7, 0xa9, 0xa8, 0xdb, 0xf5, 0x57, 0x35, 0xca,
	0xae, 0x69, 0xf4, 0x5b, 0xa8, 0xe8, 0xbc, 0xc7, 0x40, 0xce, 0xe8, 0x34, 0x51, 0x28, 0xb7, 0xa8,
	0x50, 0x56, 0xd4, 0xfd, 0x8e, 0x21, 0xa3, 0xcf, 0xef, 0xc1, 0xf2, 0x66, 0x42, 0x98, 0x16, 0x3f,
	0x06, 0x13, 0xaa, 0xb4, 0x95, 0x4d, 0xd6, 0xd2, 0x54, 0x47, 0x09, 0xa7, 0xbf, 0xa0, 0x98, 0xec,
	0x77, 0xb0, 0x15, 0x07, 0x51, 0xc4, 0x7c, 0x6b, 0xb3, 0x9a, 0xa9, 0xef, 0x9c, 0x6f, 0xde, 0xd1,
	0xa9, 0x64, 0x76, 0x02, 0x92, 0x3a, 0x54, 0xd8, 0x0f, 0xc5, 0x22, 0xbc, 0x1e, 0x34, 0x8e, 0xf5,
	0x76, 0xb7, 0xd0, 0x43, 0xe5, 0x05, 0xde, 0x8c, 0xe3, 0xae, 0x4f, 0xbe, 0x02, 0x2c, 0x97, 0xb7,
	0xb6, 0xd7, 0xcc, 0x39, 0xa6, 0xee, 0x72, 0x65, 0x3b, 0xc5, 0x24, 0x6f, 0x61, 0xfb, 0x8e, 0x3e,
	0x06, 0x1e, 0x8f, 0xac, 0x9d, 0x6a, 0xa6, 0x5e, 0x6c, 0x65, 0xad, 0x8c, 0x3d, 0x87, 0xc8, 0x25,
	0x14, 0x93, 0x47, 0xd3, 0xfc, 0x3c, 0x36, 0xff, 0xa7, 0x57, 0x2e, 0x55, 0xe3, 0xd2, 0xf0, 0x74,
	0xfb, 0xb0, 0x46, 0xe1, 0x6e, 0x09, 0x90, 0x5f, 0x43, 0x79, 0x5e, 0x47, 0xf2, 0x99, 0xf0, 0x98,
	0x55, 0xd0, 0xa7, 0x40, 0x62, 0x29, 0x89, 0x8c, 0x30, 0x40, 0xce, 0xa0, 0xf8, 0x48, 0x45, 0x90,
	0xc8, 0xe8, 0x5b, 0xc5, 0x6a, 0xae, 0xbe, 0x61, 0x2a, 0x2e, 0xf0, 0xae, 0x5f, 0x7b, 0x0f, 0x85,
	0xd4, 0x8a, 0xe4, 0x00, 0x2a, 0xe8, 0x87, 0xdb, 0x4e, 0xcb, 0xb9, 0x6c, 0x7e, 0xef, 0xb6, 0x07,
	0xfd, 0x4a, 0xa6, 0xf6, 0xaf, 0x22, 0x94, 0x56, 0x8e, 0xae, 0xef, 0xe3, 0x63, 0x20, 0x94, 0x6e,
	0xec, 0x4c, 0x4c, 0xb1, 0xf5, 0x79, 0x1b, 0x12, 0xe8, 0x46, 0x4c, 0xc9, 0x09, 0xec, 0x08, 0x76,
	0xc7, 0x84, 0x60, 0x22, 0xb9, 0xad, 0x8b, 0x77, 0x72, 0x00, 0x9b, 0x2a, 0x50, 0x53, 0x73, 0x4b,
	0xf3, 0xb6, 0x79, 0x21, 0x43, 0xd8, 0x8d, 0xe9, 0x84, 0x39, 0x4a, 0xd0, 0x48, 0x06, 0x28, 0xff,
	0x16, 0xca, 0xf4, 0x8b, 0x57, 0x6e, 0xf1, 0x90, 0x4e, 0xd8, 0x78, 0x41, 0x3c, 0xdf, 0xe8, 0x75,
	0xfb, 0xd7, 0x76, 0x39, 0x5e, 0x41, 0x89, 0x0d, 0x25, 0xc1, 0xfc, 0x40, 0x30, 0x4f, 0x19, 0xd9,
	0xb7, 0xb1, 0xde, 0x87, 0xff, 0x59, 0xcf, 0x4e, 0xb2, 0x70, 0x4a, 0x14, 0x45, 0xea, 0x4d, 0x3b,
	0x7e, 0x16, 0x05, 0x7f, 0x9d, 0xe1, 0xb0, 0xdb, 0x31, 0x8e, 0x37, 0x40, 0xd7, 0x27, 0x67, 0x50,
	0x56, 0x41, 0xc8, 0xa4, 0xa2, 0x61, 0xec, 0x84, 0x92, 0x79, 0xd8, 0xe8, 0x9c, 0x5d, 0x5a, 0xa0,
	0xdf, 0x24, 0xf3, 0xc8, 0x57, 0x38, 0x4e, 0x59, 0xfc, 0x8e, 0x8b, 0x27, 0x2a, 0x7c, 0xc7, 0xa5,
	0xde, 0x83, 0x05, 0xda, 0xbd, 0xf6, 0xe1, 0x32, 0x7c, 0x69, 0xa2, 0x2d, 0xea, 0x3d, 0x90, 0x3f,
	0xc0, 0x69, 0x3a, 0x4f, 0xf0, 0xd0, 0xa1, 0xbe, 0x2f, 0x98, 0x94, 0x8e, 0x4b, 0x05, 0x5a, 0x61,
	0xc7, 0xb6, 0x52, 0xb9, 0x82, 0x87, 0x4d, 0x43, 0x68, 0x51, 0x41, 0x3e, 0xc2, 0x41, 0x2a, 0xfd,
	0x9e, 0x87, 0xcc, 0xd1, 0x82, 0x59, 0x45, 0xcc, 0x23, 0xcb, 0xd8, 0x15, 0x0f, 0x99, 0x16, 0x84,
	0x7c, 0x81, 0xa3, 0x54, 0x86, 0x77, 0x4f, 0x83, 0xc8, 0x91, 0x8a, 0x0a, 0x65, 0x95, 0x30, 0x27,
	0x55, 0xaf, 0xad, 0x83, 0x23, 0x1d, 0x5b, 0x5b, 0xc7, 0x64, 0xb1, 0xc8, 0xb7, 0xca, 0xeb, 0xeb,
	0x60, 0x4e, 0x27, 0xc2, 0x31, 0x32, 0x99, 0x72, 0x57, 0x4f, 0x09, 0xdf, 0xda, 0x45, 0xc9, 0x76,
	0x0c, 0x80, 0xa2, 0x16, 0x25, 0xa3, 0xc2, 0xbb, 0x77, 0x14, 0x13, 0xa1, 0xb4, 0x2a, 0x0b, 0xc7,
	0x17, 0x0c, 0x3e, 0xd6, 0xb0, 0x76, 0xe4, 0xfc, 0x6a, 0x68, 0x47, 0xee, 0x19, 0x47, 0x26, 0x90,
	0x76, 0xe4, 0x2d, 0x94, 0xdc, 0x29, 0xf7, 0x1e, 0x98, 0xaf, 0xcf, 0xa0, 0x98, 0x45, 0xd0, 0x0d,
	0xef, 0x5f, 0xbf, 0xdc, 0x8d, 0x96, 0xe1, 0x8e, 0x34, 0xf5, 0xbc, 0x34, 0x1a, 0x37, 0xc7, 0x1d,
	0xa7, 0xd9, 0xeb, 0x0d, 0x6e, 0x3b, 0x17, 0x76, 0xd1, 0x4d, 0x05, 0x75, 0x3b, 0x3d, 0x1e, 0x29,
	0x3d, 0xb9, 0x62, 0xea, 0x3d, 0x38, 0x1e, 0x55, 0x6c, 0xc2, 0x45, 0xc0, 0xa4, 0xb5, 0x5f, 0xcd,
	0xd5, 0xf3, 0xf6, 0x61, 0x12, 0x1e, 0x52, 0xef, 0xa1, 0xbd, 0x08, 0xea, 0xa1, 0x74, 0xaf, 0x54,
	0x8c, 0xbb, 0x99, 0x49, 0xc7, 0xe3, 0x3e, 0xb3, 0x0e, 0xd0, 0x51, 0x65, 0x8d, 0x8f, 0x10, 0x6e,
	0x73, 0x9f, 0xe9, 0xd9, 0xc8, 0x5d, 0xc9, 0xa7, 0x4c, 0x31, 0x67, 0x7e, 0x8b, 0x9c, 0x98, 0x4f,
	0x03, 0xef, 0xd9, 0x3a, 0xd4, 0x19, 0x28, 0xc7, 0xd1, 0x9c, 0x63, 0x27, 0x94, 0x21, 0x32, 0xb4,
	0x32, 0x81, 0x74, 0x04, 0x93, 0x8a, 0x0b, 0xe6, 0x5b, 0x47, 0xd8, 0x06, 0x08, 0xa4, 0x9d, 0x20,
	0xa4, 0x07, 0xfb, 0xa9, 0x86, 0xcd, 0xed, 0x6e, 0x1d, 0xe3, 0xf0, 0x3b, 0x5d, 0xe8, 0x93, 0x9a,
	0x7c, 0x09, 0x25, 0xdd, 0xcc, 0x39, 0x46, 0xfe, 0x04, 0x6f, 0xa7, 0x54, 0xae, 0x4c, 0xf1, 0xc5,
	0x2d, 0xd4, 0x9d, 0xb1, 0xb0, 0x33, 0x6f, 0x34, 0xe7, 0x65, 0x45, 0xdd, 0xa8, 0xdf, 0x69, 0x3d,
	0x05, 0xf2, 0xd7, 0x0f, 0xfb, 0x06, 0x3f, 0x04, 0x99, 0x4f, 0x5a, 0x52, 0x64, 0xac, 0x1d, 0xf5,
	0x1a, 0xca, 0x31, 0x95, 0xf2, 0x89, 0x8b, 0x79, 0x93, 0x4f, 0xb0, 0xc9, 0xbf, 0xfc, 0x2f, 0x4d,
	0x1e, 0x26, 0x64, 0x6c, 0xa4, 0x5d, 0x8a, 0xd3, 0xaf, 0xe4, 0x18, 0xb6, 0x15, 0x95, 0x0f, 0xda,
	0x93, 0xa7, 0xe8, 0xc9, 0x2d, 0xfd, 0xda, 0xc5, 0xaf, 0x09, 0x8d, 0x3c, 0x54, 0xcf, 0x99, 0x33,
	0xde, 0x56, 0x73, 0xf5, 0x9c, 0x5d, 0x9e, 0xe3, 0x63, 0xc3, 0xec, 0xc1, 0xbe, 0x60, 0xf1, 0x94,
	0x7a, 0xcc, 0x4f, 0xe9, 0x61, 0xbd, 0xc3, 0x7f, 0xaa, 0xa5, 0xb2, 0x76, 0xc2, 0x49, 0xe9, 0x41,
	0xc4, 0x0b, 0x8c, 0xbc, 0x87, 0x12, 0x4e, 0xc8, 0x29, 0x8d, 0x26, 0x33, 0x7d, 0x73, 0x7f, 0x8e,
	0x52, 0x16, 0x35, 0xd8, 0x4b, 0xb0, 0xda, 0x17, 0x28, 0xa6, 0xad, 0x4b, 0xf6, 0x60, 0xd5, 0xbc,
	0x95, 0xcc, 0x12, 0x6a, 0xf5, 0x06, 0xed, 0xeb, 0xce, 0x45, 0x25, 0x5b, 0xfb, 0x0b, 0x94, 0x56,
	0xb4, 0x20, 0x27, 0x70, 0x34, 0x6c, 0x8e, 0x46, 0xb7, 0x03, 0xfb, 0xc2, 0x31, 0xe4, 0x9b, 0xfe,
	0x75, 0x7f, 0x70, 0xdb, 0xaf, 0xfc, 0x8c, 0x1c, 0xc2, 0x5e, 0x7f, 0xe0, 0x2c, 0xc2, 0x97, 0xdd,
	0x4e, 0x4f, 0x97, 0x3d, 0x02, 0x72, 0xd5, 0x1c, 0xad, 0xe3, 0xd9, 0xda, 0xaf, 0x80, 0xbc, 0x6c,
	0xb4, 0xfe, 0x77, 0xd1, 0x6e, 0x30, 0xff, 0xa9, 0xfa, 0xb1, 0xf6, 0xef, 0x0c, 0x90, 0x97, 0x4a,
	0x90, 0x06, 0xec, 0xdf, 0x05, 0x42, 0x2a, 0xc7, 0xe3, 0x61, 0x18, 0x28, 0xfd, 0xc7, 0xb5, 0x4c,
	0xdc, 0xc3, 0x50, 0x7b, 0x1e, 0xd1, 0xf6, 0xf9, 0x08, 0x07, 0x86, 0xbf, 0x36, 0x8a, 0xb3, 0xd8,
	0x43, 0x82, 0xb1, 0xf1, 0xca, 0x3c, 0xbe, 0x81, 0x43, 0x93, 0xb1, 0xfe, 0xfd, 0xc9, 0xfd, 0x9f,
	0xdf, 0x1f, 0xdb, 0xec, 0x70, 0x15, 0x6c, 0xfd, 0x06, 0xce, 0xb8, 0x98, 0x34, 0xbc, 0x7b, 0xc1,
	0xc3, 0x60, 0x16, 0x36, 0x3c, 0x1e, 0xc6, 0x3c, 0x62, 0x91, 0x92, 0x58, 0xd0, 0xfc, 0xcc, 0x7b,
	0x7c, 0x7a, 0x95, 0x1b, 0x66, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x21, 0xfd, 0x44, 0x36, 0x08,
	0x0c, 0x00, 0x00,
}
