// Code generated by protoc-gen-go. DO NOT EDIT.
// source: extension_specifics.proto

package sync_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Properties of extension sync objects.
//
// Merge policy: the settings for the higher version number win; in
// the case of a tie, server wins.
type ExtensionSpecifics struct {
	// Globally unique id for this extension.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The known installed version.
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// Auto-update URL to use for this extension.  May be blank, in
	// which case the default one (i.e., the one for the Chrome
	// Extensions Gallery) is used.
	UpdateUrl *string `protobuf:"bytes,3,opt,name=update_url,json=updateUrl" json:"update_url,omitempty"`
	// Whether or not this extension is enabled.
	Enabled *bool `protobuf:"varint,4,opt,name=enabled" json:"enabled,omitempty"`
	// Whether or not this extension is enabled in incognito mode.
	IncognitoEnabled *bool `protobuf:"varint,5,opt,name=incognito_enabled,json=incognitoEnabled" json:"incognito_enabled,omitempty"`
	// The name of the extension. Used for bookmark apps.
	Name *string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	// Whether this extension was installed remotely, and hasn't been approved by
	// a user in chrome yet.
	RemoteInstall *bool `protobuf:"varint,7,opt,name=remote_install,json=remoteInstall" json:"remote_install,omitempty"`
	// DEPRECATED. See https://crbug.com/1014183.
	InstalledByCustodian *bool `protobuf:"varint,8,opt,name=installed_by_custodian,json=installedByCustodian" json:"installed_by_custodian,omitempty"` // Deprecated: Do not use.
	// DEPRECATED. See https://crbug.com/839681.
	AllUrlsEnabled *bool `protobuf:"varint,9,opt,name=all_urls_enabled,json=allUrlsEnabled" json:"all_urls_enabled,omitempty"` // Deprecated: Do not use.
	// Bitmask of the set of reasons why the extension is disabled (see
	// extensions::disable_reason::DisableReason). Only relevant when enabled ==
	// false. Note that old clients (<M45) won't set this, even when enabled is
	// false.
	DisableReasons       *int32   `protobuf:"varint,10,opt,name=disable_reasons,json=disableReasons" json:"disable_reasons,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtensionSpecifics) Reset()         { *m = ExtensionSpecifics{} }
func (m *ExtensionSpecifics) String() string { return proto.CompactTextString(m) }
func (*ExtensionSpecifics) ProtoMessage()    {}
func (*ExtensionSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b09d9b6faaac99, []int{0}
}

func (m *ExtensionSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtensionSpecifics.Unmarshal(m, b)
}
func (m *ExtensionSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtensionSpecifics.Marshal(b, m, deterministic)
}
func (m *ExtensionSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionSpecifics.Merge(m, src)
}
func (m *ExtensionSpecifics) XXX_Size() int {
	return xxx_messageInfo_ExtensionSpecifics.Size(m)
}
func (m *ExtensionSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionSpecifics proto.InternalMessageInfo

func (m *ExtensionSpecifics) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ExtensionSpecifics) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ExtensionSpecifics) GetUpdateUrl() string {
	if m != nil && m.UpdateUrl != nil {
		return *m.UpdateUrl
	}
	return ""
}

func (m *ExtensionSpecifics) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

func (m *ExtensionSpecifics) GetIncognitoEnabled() bool {
	if m != nil && m.IncognitoEnabled != nil {
		return *m.IncognitoEnabled
	}
	return false
}

func (m *ExtensionSpecifics) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ExtensionSpecifics) GetRemoteInstall() bool {
	if m != nil && m.RemoteInstall != nil {
		return *m.RemoteInstall
	}
	return false
}

// Deprecated: Do not use.
func (m *ExtensionSpecifics) GetInstalledByCustodian() bool {
	if m != nil && m.InstalledByCustodian != nil {
		return *m.InstalledByCustodian
	}
	return false
}

// Deprecated: Do not use.
func (m *ExtensionSpecifics) GetAllUrlsEnabled() bool {
	if m != nil && m.AllUrlsEnabled != nil {
		return *m.AllUrlsEnabled
	}
	return false
}

func (m *ExtensionSpecifics) GetDisableReasons() int32 {
	if m != nil && m.DisableReasons != nil {
		return *m.DisableReasons
	}
	return 0
}

func init() {
	proto.RegisterType((*ExtensionSpecifics)(nil), "sync_pb.ExtensionSpecifics")
}

func init() {
	proto.RegisterFile("extension_specifics.proto", fileDescriptor_99b09d9b6faaac99)
}

var fileDescriptor_99b09d9b6faaac99 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x91, 0xc1, 0x6a, 0xe3, 0x30,
	0x10, 0x86, 0xb1, 0x93, 0x6c, 0x92, 0x81, 0xf5, 0x66, 0xc5, 0xb2, 0xa8, 0x87, 0x42, 0x28, 0x84,
	0x06, 0x52, 0x7c, 0xee, 0x39, 0x25, 0xd0, 0xde, 0x8a, 0x4b, 0xce, 0x42, 0x91, 0xa6, 0xa9, 0x40,
	0xd6, 0x18, 0x49, 0x2e, 0xcd, 0x5b, 0xf7, 0x11, 0x8a, 0xed, 0xc8, 0xb7, 0x99, 0xef, 0xff, 0x46,
	0x8c, 0x18, 0xb8, 0xc1, 0xaf, 0x88, 0x2e, 0x18, 0x72, 0x22, 0x34, 0xa8, 0xcc, 0xbb, 0x51, 0xa1,
	0x6c, 0x3c, 0x45, 0x62, 0xf3, 0x70, 0x71, 0x4a, 0x34, 0xa7, 0xbb, 0xef, 0x1c, 0xd8, 0x21, 0x69,
	0x6f, 0xc9, 0x62, 0x05, 0xe4, 0x46, 0xf3, 0x6c, 0x9d, 0x6d, 0x97, 0x55, 0x6e, 0x34, 0xe3, 0x30,
	0xff, 0x44, 0xdf, 0x39, 0x3c, 0xef, 0x61, 0x6a, 0xd9, 0x2d, 0x40, 0xdb, 0x68, 0x19, 0x51, 0xb4,
	0xde, 0xf2, 0x49, 0x1f, 0x2e, 0x07, 0x72, 0xf4, 0xb6, 0x1b, 0x44, 0x27, 0x4f, 0x16, 0x35, 0x9f,
	0xae, 0xb3, 0xed, 0xa2, 0x4a, 0x2d, 0xdb, 0xc1, 0x5f, 0xe3, 0x14, 0x9d, 0x9d, 0x89, 0x24, 0x92,
	0x33, 0xeb, 0x9d, 0xd5, 0x18, 0x1c, 0xae, 0x32, 0x83, 0xa9, 0x93, 0x35, 0xf2, 0x5f, 0xfd, 0xfb,
	0x7d, 0xcd, 0x36, 0x50, 0x78, 0xac, 0x29, 0xa2, 0x30, 0x2e, 0x44, 0x69, 0x2d, 0x9f, 0xf7, 0xd3,
	0xbf, 0x07, 0xfa, 0x32, 0x40, 0xf6, 0x08, 0xff, 0xaf, 0x39, 0x6a, 0x71, 0xba, 0x08, 0xd5, 0x86,
	0x48, 0xda, 0x48, 0xc7, 0x17, 0x9d, 0xbe, 0xcf, 0x79, 0x56, 0xfd, 0x1b, 0x8d, 0xfd, 0xe5, 0x29,
	0xe5, 0xec, 0x01, 0x56, 0xd2, 0xda, 0xee, 0x5f, 0x61, 0x5c, 0x70, 0x39, 0xce, 0x14, 0xd2, 0xda,
	0xa3, 0xb7, 0x21, 0xad, 0x78, 0x0f, 0x7f, 0xb4, 0x09, 0x5d, 0x2d, 0x3c, 0xca, 0x40, 0x2e, 0x70,
	0x58, 0x67, 0xdb, 0x59, 0x55, 0x5c, 0x71, 0x35, 0xd0, 0xfd, 0x0e, 0x36, 0xe4, 0xcf, 0xa5, 0xfa,
	0xf0, 0x54, 0x9b, 0xb6, 0x2e, 0x15, 0xd5, 0x0d, 0x39, 0x74, 0x31, 0x94, 0xdd, 0x55, 0x86, 0x0b,
	0x29, 0xb2, 0xcf, 0x93, 0xd7, 0xec, 0x27, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xee, 0xbc, 0x88, 0xc4,
	0x01, 0x00, 0x00,
}
